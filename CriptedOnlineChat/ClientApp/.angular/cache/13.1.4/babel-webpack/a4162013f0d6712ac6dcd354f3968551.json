{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/db\";\nimport * as i2 from \"./websocket.service\";\nimport * as i3 from \"./rsa.service\";\nexport let RSAKeysService = /*#__PURE__*/(() => {\n  class RSAKeysService {\n    constructor(AppDB, WebSocketService, rsaService) {\n      this.rsaService = rsaService;\n      this.appDB = AppDB;\n      this.WebSocketService = WebSocketService;\n    }\n\n    AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let pubKey = {\n          id: idKey,\n          n: key.n,\n          e: key.e\n        };\n\n        if (isRecipientKey) {\n          _this.appDB.PublicKeyForEncript.add(pubKey);\n        } else {\n          _this.appDB.PublicKey.add(pubKey);\n        }\n      })();\n    }\n\n    AddPrivateKeyToLocalDB(privateKey, idKey) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let prKey = {\n          id: idKey,\n          n: privateKey.n,\n          e: privateKey.e,\n          d: privateKey.d,\n          p: privateKey.p,\n          q: privateKey.q,\n          dP: privateKey.dP,\n          dQ: privateKey.dQ,\n          qInv: privateKey.qInv\n        };\n        yield _this2.appDB.PrivateKey.add(prKey);\n      })();\n    }\n\n    SendRSAPublicKey(senderid, recipientId, pubKey) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        let sendedRsa = {\n          senderUserId: senderid,\n          recipientUserId: recipientId,\n          nDataJson: JSON.stringify(pubKey.n.data),\n          ns: pubKey.n.s,\n          nt: pubKey.n.t,\n          eDataJson: JSON.stringify(pubKey.e.data),\n          es: pubKey.e.s,\n          et: pubKey.e.t\n        };\n        yield _this3.WebSocketService.SendPublicRSAKey(sendedRsa);\n      })();\n    }\n\n    AddNewRSAKeysServer(keys) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        keys.forEach( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (element) {\n            // parsing data\n            let insertedPubKey = {\n              id: uuidv4()\n            }; // parse n data\n\n            let n = new forge.jsbn.BigInteger(null);\n            n.s = element.ns;\n            n.t = element.nt;\n            n.data = JSON.parse(element.nDataJson); // parse e data\n\n            let e = new forge.jsbn.BigInteger(null);\n            e.s = element.es;\n            e.t = element.et;\n            e.data = JSON.parse(element.eDataJson);\n            insertedPubKey.e = e;\n            insertedPubKey.n = n; // add to db\n\n            _this4.appDB.PublicKeyForEncript.add(insertedPubKey);\n\n            let isContaints = (yield _this4.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count()) == 0;\n\n            if (isContaints) {\n              var keyPair = yield _this4.rsaService.GenerateKeyPair();\n              let pubKeyId = uuidv4();\n              let prtKeyId = uuidv4();\n              yield _this4.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\n              yield _this4.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\n              yield _this4.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\n              let newContact = {\n                Login: element.senderLogin\n              };\n              newContact.ContactId = element.senderUserId;\n              newContact.Login = element.senderLogin;\n              newContact.PublicKeyForEncriptId = insertedPubKey.id;\n              newContact.PrivateKeyId = prtKeyId;\n              newContact.PublicKeyId = pubKeyId;\n\n              _this4.appDB.Contacts.add(newContact);\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n  }\n\n  RSAKeysService.ɵfac = function RSAKeysService_Factory(t) {\n    return new (t || RSAKeysService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.WebSocketService), i0.ɵɵinject(i3.RSAService));\n  };\n\n  RSAKeysService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RSAKeysService,\n    factory: RSAKeysService.ɵfac,\n    providedIn: 'root'\n  });\n  return RSAKeysService;\n})();\nexport let SendRSAPublicKeyDTO = /*#__PURE__*/(() => {\n  class SendRSAPublicKeyDTO {\n    constructor() {\n      this.senderLogin = \"\";\n      this.senderUserId = \"\";\n      this.recipientUserId = \"\";\n      this.nt = 0;\n      this.ns = 0;\n      this.et = 0;\n      this.es = 0;\n      this.nDataJson = \"\";\n      this.eDataJson = \"\";\n    }\n\n  }\n\n  SendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) {\n    return new (t || SendRSAPublicKeyDTO)();\n  };\n\n  SendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SendRSAPublicKeyDTO,\n    factory: SendRSAPublicKeyDTO.ɵfac,\n    providedIn: 'root'\n  });\n  return SendRSAPublicKeyDTO;\n})();","map":null,"metadata":{},"sourceType":"module"}