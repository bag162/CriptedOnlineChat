{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor() {}\n\n  ngOnInit() {}\n\n  InitService() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.GenerateKeyPair().then(x => {\n        forge.pki.rsa.setPrivateKey(x.privateKey.n, x.privateKey.e, x.privateKey.d, x.privateKey.p, x.privateKey.q, x.privateKey.dP, x.privateKey.dQ, x.privateKey.qInv);\n        forge.pki.rsa.setPublicKey(x.publicKey.n, x.publicKey.e);\n      });\n    })();\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.publicKey != undefined) {\n        let encriptedMessage = yield _this2.publicKey.encrypt(message);\n        return encriptedMessage;\n      } else {\n        return \"undefined\"; // убрать костыль\n      }\n    })();\n  }\n\n  DecriptMessage(message) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.privateKey != undefined) {\n        let decriptedMessage = yield _this3.privateKey.decrypt(message);\n        return decriptedMessage;\n      } else {\n        return \"undefined\"; // тут то же убрать\n      }\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","RSAService","constructor","ngOnInit","InitService","GenerateKeyPair","then","x","pki","rsa","setPrivateKey","privateKey","n","e","d","p","q","dP","dQ","qInv","setPublicKey","publicKey","keyPair","generateKeyPair","bits","EncriptMessage","message","undefined","encriptedMessage","encrypt","DecriptMessage","decriptedMessage","decrypt","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACDC,EAAAA,QAAQ,GAAG,CACV;;AACKC,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,MAAA,KAAI,CAACC,eAAL,GAAuBC,IAAvB,CAA4BC,CAAC,IAAI;AAC7BR,QAAAA,KAAK,CAACS,GAAN,CAAUC,GAAV,CAAcC,aAAd,CAA4BH,CAAC,CAACI,UAAF,CAAaC,CAAzC,EAA4CL,CAAC,CAACI,UAAF,CAAaE,CAAzD,EAA4DN,CAAC,CAACI,UAAF,CAAaG,CAAzE,EAA4EP,CAAC,CAACI,UAAF,CAAaI,CAAzF,EAA4FR,CAAC,CAACI,UAAF,CAAaK,CAAzG,EAA4GT,CAAC,CAACI,UAAF,CAAaM,EAAzH,EAA6HV,CAAC,CAACI,UAAF,CAAaO,EAA1I,EAA8IX,CAAC,CAACI,UAAF,CAAaQ,IAA3J;AACApB,QAAAA,KAAK,CAACS,GAAN,CAAUC,GAAV,CAAcW,YAAd,CAA2Bb,CAAC,CAACc,SAAF,CAAYT,CAAvC,EAA0CL,CAAC,CAACc,SAAF,CAAYR,CAAtD;AACH,OAHD;AADgB;AAKnB;;AACKR,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIiB,OAAO,SAASvB,KAAK,CAACS,GAAN,CAAUC,GAAV,CAAcc,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcX,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAApB;AACA,aAAOS,OAAP;AAFoB;AAGvB;;AACKG,EAAAA,cAAc,CAACC,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACL,SAAL,IAAkBM,SAAtB,EAAiC;AAC7B,YAAIC,gBAAgB,SAAS,MAAI,CAACP,SAAL,CAAeQ,OAAf,CAAuBH,OAAvB,CAA7B;AACA,eAAOE,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AACKE,EAAAA,cAAc,CAACJ,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACf,UAAL,IAAmBgB,SAAvB,EAAkC;AAC9B,YAAII,gBAAgB,SAAS,MAAI,CAACpB,UAAL,CAAgBqB,OAAhB,CAAwBN,OAAxB,CAA7B;AACA,eAAOK,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AAhCmB;;AAkCxB9B,UAAU,CAACgC,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIlC,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACmC,KAAX,GAAmB,aAAcpC,EAAE,CAACqC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,UAAT;AAAqBsC,EAAAA,OAAO,EAAEtC,UAAU,CAACgC,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    async InitService() {\r\n        this.GenerateKeyPair().then(x => {\r\n            forge.pki.rsa.setPrivateKey(x.privateKey.n, x.privateKey.e, x.privateKey.d, x.privateKey.p, x.privateKey.q, x.privateKey.dP, x.privateKey.dQ, x.privateKey.qInv);\r\n            forge.pki.rsa.setPublicKey(x.publicKey.n, x.publicKey.e);\r\n        });\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message) {\r\n        if (this.publicKey != undefined) {\r\n            let encriptedMessage = await this.publicKey.encrypt(message);\r\n            return encriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // убрать костыль\r\n        }\r\n    }\r\n    async DecriptMessage(message) {\r\n        if (this.privateKey != undefined) {\r\n            let decriptedMessage = await this.privateKey.decrypt(message);\r\n            return decriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // тут то же убрать\r\n        }\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}