{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./WebSocket.service\";\nexport class RSAService {\n  constructor(WebSocketService) {\n    this.WebSocketService = WebSocketService;\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001,\n        workers: 2\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var newPubKey = validKeyPair.publicKey;\n      newPubKey.e.data = publicKey.e.data;\n      newPubKey.e.s = publicKey.e.s;\n      newPubKey.e.t = publicKey.e.t;\n      newPubKey.n.data = publicKey.n.data;\n      newPubKey.n.s = publicKey.n.s;\n      newPubKey.n.t = publicKey.n.t;\n      return yield newPubKey.encrypt(forge.util.encodeUtf8(message));\n      ;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    return _asyncToGenerator(function* () {\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var s = \"test mesg\";\n      var encripted = validKeyPair.publicKey.encrypt(forge.util.encodeUtf8(s));\n      console.log(encripted);\n      var decripted = validKeyPair.privateKey.decrypt(encripted);\n      console.log();\n      var newPrKey = validKeyPair.privateKey;\n      newPrKey.d.data = privateKey.d.data;\n      newPrKey.d.s = privateKey.d.s;\n      newPrKey.d.t = privateKey.d.t;\n      newPrKey.dP.data = privateKey.dP.data;\n      newPrKey.dP.s = privateKey.dP.s;\n      newPrKey.dP.t = privateKey.dP.t;\n      newPrKey.dQ.data = privateKey.dQ.data;\n      newPrKey.dQ.s = privateKey.dQ.s;\n      newPrKey.dQ.t = privateKey.dQ.t;\n      newPrKey.e.data = privateKey.e.data;\n      newPrKey.e.s = privateKey.e.s;\n      newPrKey.e.t = privateKey.e.t;\n      newPrKey.n.data = privateKey.n.data;\n      newPrKey.n.s = privateKey.n.s;\n      newPrKey.n.t = privateKey.n.t;\n      newPrKey.p.data = privateKey.p.data;\n      newPrKey.p.s = privateKey.p.s;\n      newPrKey.p.t = privateKey.p.t;\n      newPrKey.q.data = privateKey.q.data;\n      newPrKey.q.s = privateKey.q.s;\n      newPrKey.q.t = privateKey.q.t;\n      newPrKey.qInv.data = privateKey.qInv.data;\n      newPrKey.qInv.s = privateKey.qInv.s;\n      newPrKey.qInv.t = privateKey.qInv.t;\n      console.log(forge.util.decodeUtf8(yield newPrKey.decrypt(message)));\n      return forge.util.decodeUtf8(yield newPrKey.decrypt(message));\n    })();\n  }\n\n  SendRSAPublicKey(rsaKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.WebSocketService.SendPublicRSAKey(rsaKey);\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)(i0.ɵɵinject(i1.WebSocketService));\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\nexport class SendRSAPublicKeyDTO {\n  constructor() {\n    this.senderLogin = \"\";\n    this.senderUserId = \"\";\n    this.recipientUserId = \"\";\n    this.nt = 0;\n    this.ns = 0;\n    this.et = 0;\n    this.es = 0;\n    this.nDataJson = \"\";\n    this.eDataJson = \"\";\n  }\n\n}\n\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) {\n  return new (t || SendRSAPublicKeyDTO)();\n};\n\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SendRSAPublicKeyDTO,\n  factory: SendRSAPublicKeyDTO.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.service.ts"],"names":["forge","i0","i1","RSAService","constructor","WebSocketService","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","workers","EncriptMessage","message","publicKey","validKeyPair","newPubKey","data","s","t","n","encrypt","util","encodeUtf8","DecriptMessage","privateKey","encripted","console","log","decripted","decrypt","newPrKey","d","dP","dQ","p","q","qInv","decodeUtf8","SendRSAPublicKey","rsaKey","SendPublicRSAKey","ɵfac","RSAService_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","SendRSAPublicKeyDTO","senderLogin","senderUserId","recipientUserId","nt","ns","et","es","nDataJson","eDataJson","SendRSAPublicKeyDTO_Factory"],"mappings":"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","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./WebSocket.service\";\r\nexport class RSAService {\r\n    constructor(WebSocketService) {\r\n        this.WebSocketService = WebSocketService;\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001, workers: 2 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var newPubKey = validKeyPair.publicKey;\r\n        newPubKey.e.data = publicKey.e.data;\r\n        newPubKey.e.s = publicKey.e.s;\r\n        newPubKey.e.t = publicKey.e.t;\r\n        newPubKey.n.data = publicKey.n.data;\r\n        newPubKey.n.s = publicKey.n.s;\r\n        newPubKey.n.t = publicKey.n.t;\r\n        return await newPubKey.encrypt(forge.util.encodeUtf8(message));\r\n        ;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var s = \"test mesg\";\r\n        var encripted = validKeyPair.publicKey.encrypt(forge.util.encodeUtf8(s));\r\n        console.log(encripted);\r\n        var decripted = validKeyPair.privateKey.decrypt(encripted);\r\n        console.log();\r\n        var newPrKey = validKeyPair.privateKey;\r\n        newPrKey.d.data = privateKey.d.data;\r\n        newPrKey.d.s = privateKey.d.s;\r\n        newPrKey.d.t = privateKey.d.t;\r\n        newPrKey.dP.data = privateKey.dP.data;\r\n        newPrKey.dP.s = privateKey.dP.s;\r\n        newPrKey.dP.t = privateKey.dP.t;\r\n        newPrKey.dQ.data = privateKey.dQ.data;\r\n        newPrKey.dQ.s = privateKey.dQ.s;\r\n        newPrKey.dQ.t = privateKey.dQ.t;\r\n        newPrKey.e.data = privateKey.e.data;\r\n        newPrKey.e.s = privateKey.e.s;\r\n        newPrKey.e.t = privateKey.e.t;\r\n        newPrKey.n.data = privateKey.n.data;\r\n        newPrKey.n.s = privateKey.n.s;\r\n        newPrKey.n.t = privateKey.n.t;\r\n        newPrKey.p.data = privateKey.p.data;\r\n        newPrKey.p.s = privateKey.p.s;\r\n        newPrKey.p.t = privateKey.p.t;\r\n        newPrKey.q.data = privateKey.q.data;\r\n        newPrKey.q.s = privateKey.q.s;\r\n        newPrKey.q.t = privateKey.q.t;\r\n        newPrKey.qInv.data = privateKey.qInv.data;\r\n        newPrKey.qInv.s = privateKey.qInv.s;\r\n        newPrKey.qInv.t = privateKey.qInv.t;\r\n        console.log(forge.util.decodeUtf8(await newPrKey.decrypt(message)));\r\n        return forge.util.decodeUtf8(await newPrKey.decrypt(message));\r\n    }\r\n    async SendRSAPublicKey(rsaKey) {\r\n        await this.WebSocketService.SendPublicRSAKey(rsaKey);\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(i0.ɵɵinject(i1.WebSocketService)); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nexport class SendRSAPublicKeyDTO {\r\n    constructor() {\r\n        this.senderLogin = \"\";\r\n        this.senderUserId = \"\";\r\n        this.recipientUserId = \"\";\r\n        this.nt = 0;\r\n        this.ns = 0;\r\n        this.et = 0;\r\n        this.es = 0;\r\n        this.nDataJson = \"\";\r\n        this.eDataJson = \"\";\r\n    }\r\n}\r\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) { return new (t || SendRSAPublicKeyDTO)(); };\r\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SendRSAPublicKeyDTO, factory: SendRSAPublicKeyDTO.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}