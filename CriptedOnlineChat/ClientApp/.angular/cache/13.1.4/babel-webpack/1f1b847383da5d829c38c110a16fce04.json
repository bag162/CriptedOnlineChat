{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/db\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"./rsa.service\";\nexport class WebSocketService {\n  constructor(baseUrl, appDB, messageService, RSAService) {\n    this.baseUrl = baseUrl + \"schatHub\";\n    this.messageService = messageService;\n    this.appDB = appDB;\n    this.RSAService = RSAService;\n    this.HubConnection = new HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(\"http://localhost:5172/schatHub\").build();\n    this.HubConnection.start();\n    this.initWebSocket();\n  }\n\n  initWebSocket() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.HubConnection.on(\"Test\", message => {\n        console.log(message);\n      });\n      yield _this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => {\n        _this.RSAKeysService.AddNewRSAKeysServer(rsaKeys);\n      });\n      yield _this.HubConnection.on(\"AddNewMessages\", messages => {\n        _this.messageService.AddNewMessages(messages);\n      });\n    })();\n  }\n\n  sendMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.HubConnection.send(\"SendMessage\", message);\n    })();\n  }\n\n  SendPublicRSAKey(rsaKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.HubConnection.send(\"SendRSAKeys\", rsaKey);\n    })();\n  }\n\n  SendRSAPublicKey(senderid, recipientId, pubKey) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let sendedRsa = {\n        senderUserId: senderid,\n        recipientUserId: recipientId,\n        nDataJson: JSON.stringify(pubKey.n.data),\n        ns: pubKey.n.s,\n        nt: pubKey.n.t,\n        eDataJson: JSON.stringify(pubKey.e.data),\n        es: pubKey.e.s,\n        et: pubKey.e.t\n      };\n      yield _this4.WebSocketService.SendPublicRSAKey(sendedRsa);\n    })();\n  }\n\n}\n\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.RSAService));\n};\n\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/websocket.service.ts"],"names":["signalR","HubConnectionBuilder","i0","i1","i2","i3","WebSocketService","constructor","baseUrl","appDB","messageService","RSAService","HubConnection","configureLogging","LogLevel","Debug","withUrl","build","start","initWebSocket","on","message","console","log","rsaKeys","RSAKeysService","AddNewRSAKeysServer","messages","AddNewMessages","sendMessage","send","SendPublicRSAKey","rsaKey","SendRSAPublicKey","senderid","recipientId","pubKey","sendedRsa","senderUserId","recipientUserId","nDataJson","JSON","stringify","n","data","ns","s","nt","t","eDataJson","e","es","et","ɵfac","WebSocketService_Factory","ɵɵinject","AppDB","MessageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/db\";\r\nimport * as i2 from \"./message.service\";\r\nimport * as i3 from \"./rsa.service\";\r\nexport class WebSocketService {\r\n    constructor(baseUrl, appDB, messageService, RSAService) {\r\n        this.baseUrl = baseUrl + \"schatHub\";\r\n        this.messageService = messageService;\r\n        this.appDB = appDB;\r\n        this.RSAService = RSAService;\r\n        this.HubConnection = new HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(\"http://localhost:5172/schatHub\")\r\n            .build();\r\n        this.HubConnection.start();\r\n        this.initWebSocket();\r\n    }\r\n    async initWebSocket() {\r\n        await this.HubConnection.on(\"Test\", message => { console.log(message); });\r\n        await this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => { this.RSAKeysService.AddNewRSAKeysServer(rsaKeys); });\r\n        await this.HubConnection.on(\"AddNewMessages\", messages => { this.messageService.AddNewMessages(messages); });\r\n    }\r\n    async sendMessage(message) {\r\n        await this.HubConnection.send(\"SendMessage\", message);\r\n    }\r\n    async SendPublicRSAKey(rsaKey) {\r\n        await this.HubConnection.send(\"SendRSAKeys\", rsaKey);\r\n    }\r\n    async SendRSAPublicKey(senderid, recipientId, pubKey) {\r\n        let sendedRsa = {\r\n            senderUserId: senderid,\r\n            recipientUserId: recipientId, nDataJson: JSON.stringify(pubKey.n.data),\r\n            ns: pubKey.n.s, nt: pubKey.n.t, eDataJson: JSON.stringify(pubKey.e.data), es: pubKey.e.s, et: pubKey.e.t\r\n        };\r\n        await this.WebSocketService.SendPublicRSAKey(sendedRsa);\r\n    }\r\n}\r\nWebSocketService.ɵfac = function WebSocketService_Factory(t) { return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.RSAService)); };\r\nWebSocketService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WebSocketService, factory: WebSocketService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}