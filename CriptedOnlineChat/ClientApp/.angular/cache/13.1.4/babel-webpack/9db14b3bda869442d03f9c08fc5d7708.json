{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor() {\n    this.keyPair = forge.pki.rsa.generateKeyPair();\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001,\n        workers: 2\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var newPubKey = validKeyPair.publicKey;\n      newPubKey.e.data = publicKey.e.data;\n      newPubKey.e.s = publicKey.e.s;\n      newPubKey.e.t = publicKey.e.t;\n      newPubKey.n.data = publicKey.n.data;\n      newPubKey.n.s = publicKey.n.s;\n      newPubKey.n.t = publicKey.n.t;\n      return yield newPubKey.encrypt(forge.util.encodeUtf8(message));\n      ;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var newPrKey = _this.keyPair.privateKey;\n      newPrKey.d.data = privateKey.d.data;\n      newPrKey.d.s = privateKey.d.s;\n      newPrKey.d.t = privateKey.d.t;\n      newPrKey.dP.data = privateKey.dP.data;\n      newPrKey.dP.s = privateKey.dP.s;\n      newPrKey.dP.t = privateKey.dP.t;\n      newPrKey.dQ.data = privateKey.dQ.data;\n      newPrKey.dQ.s = privateKey.dQ.s;\n      newPrKey.dQ.t = privateKey.dQ.t;\n      newPrKey.e.data = privateKey.e.data;\n      newPrKey.e.s = privateKey.e.s;\n      newPrKey.e.t = privateKey.e.t;\n      newPrKey.n.data = privateKey.n.data;\n      newPrKey.n.s = privateKey.n.s;\n      newPrKey.n.t = privateKey.n.t;\n      newPrKey.p.data = privateKey.p.data;\n      newPrKey.p.s = privateKey.p.s;\n      newPrKey.p.t = privateKey.p.t;\n      newPrKey.q.data = privateKey.q.data;\n      newPrKey.q.s = privateKey.q.s;\n      newPrKey.q.t = privateKey.q.t;\n      newPrKey.qInv.data = privateKey.qInv.data;\n      newPrKey.qInv.s = privateKey.qInv.s;\n      newPrKey.qInv.t = privateKey.qInv.t;\n      return forge.util.decodeUtf8(yield newPrKey.decrypt(message));\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.service.ts"],"names":["forge","i0","RSAService","constructor","keyPair","pki","rsa","generateKeyPair","GenerateKeyPair","bits","e","workers","EncriptMessage","message","publicKey","validKeyPair","newPubKey","data","s","t","n","encrypt","util","encodeUtf8","DecriptMessage","privateKey","newPrKey","d","dP","dQ","p","q","qInv","decodeUtf8","decrypt","ɵfac","RSAService_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor() {\r\n        this.keyPair = forge.pki.rsa.generateKeyPair();\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001, workers: 2 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var newPubKey = validKeyPair.publicKey;\r\n        newPubKey.e.data = publicKey.e.data;\r\n        newPubKey.e.s = publicKey.e.s;\r\n        newPubKey.e.t = publicKey.e.t;\r\n        newPubKey.n.data = publicKey.n.data;\r\n        newPubKey.n.s = publicKey.n.s;\r\n        newPubKey.n.t = publicKey.n.t;\r\n        return await newPubKey.encrypt(forge.util.encodeUtf8(message));\r\n        ;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        var newPrKey = this.keyPair.privateKey;\r\n        newPrKey.d.data = privateKey.d.data;\r\n        newPrKey.d.s = privateKey.d.s;\r\n        newPrKey.d.t = privateKey.d.t;\r\n        newPrKey.dP.data = privateKey.dP.data;\r\n        newPrKey.dP.s = privateKey.dP.s;\r\n        newPrKey.dP.t = privateKey.dP.t;\r\n        newPrKey.dQ.data = privateKey.dQ.data;\r\n        newPrKey.dQ.s = privateKey.dQ.s;\r\n        newPrKey.dQ.t = privateKey.dQ.t;\r\n        newPrKey.e.data = privateKey.e.data;\r\n        newPrKey.e.s = privateKey.e.s;\r\n        newPrKey.e.t = privateKey.e.t;\r\n        newPrKey.n.data = privateKey.n.data;\r\n        newPrKey.n.s = privateKey.n.s;\r\n        newPrKey.n.t = privateKey.n.t;\r\n        newPrKey.p.data = privateKey.p.data;\r\n        newPrKey.p.s = privateKey.p.s;\r\n        newPrKey.p.t = privateKey.p.t;\r\n        newPrKey.q.data = privateKey.q.data;\r\n        newPrKey.q.s = privateKey.q.s;\r\n        newPrKey.q.t = privateKey.q.t;\r\n        newPrKey.qInv.data = privateKey.qInv.data;\r\n        newPrKey.qInv.s = privateKey.qInv.s;\r\n        newPrKey.qInv.t = privateKey.qInv.t;\r\n        return forge.util.decodeUtf8(await newPrKey.decrypt(message));\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}