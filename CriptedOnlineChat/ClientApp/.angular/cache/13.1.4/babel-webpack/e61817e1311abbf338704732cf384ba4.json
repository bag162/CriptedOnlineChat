{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport let RSAService = /*#__PURE__*/(() => {\n  class RSAService {\n    constructor() {\n      this.keyPair = forge.pki.rsa.generateKeyPair();\n    }\n\n    GenerateKeyPair() {\n      return _asyncToGenerator(function* () {\n        let keyPair = yield forge.pki.rsa.generateKeyPair({\n          bits: 2048,\n          e: 0x10001,\n          workers: 2\n        });\n        return keyPair;\n      })();\n    }\n\n    EncriptMessage(message, publicKey) {\n      return _asyncToGenerator(function* () {\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\n        var newPubKey = validKeyPair.publicKey;\n        newPubKey.e.data = publicKey.e.data;\n        newPubKey.e.s = publicKey.e.s;\n        newPubKey.e.t = publicKey.e.t;\n        newPubKey.n.data = publicKey.n.data;\n        newPubKey.n.s = publicKey.n.s;\n        newPubKey.n.t = publicKey.n.t;\n        return yield newPubKey.encrypt(forge.util.encodeUtf8(message));\n        ;\n      })();\n    }\n\n    DecriptMessage(message, privateKey) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var newPrKey = _this.keyPair.privateKey;\n        newPrKey.d.data = privateKey.d.data;\n        newPrKey.d.s = privateKey.d.s;\n        newPrKey.d.t = privateKey.d.t;\n        newPrKey.dP.data = privateKey.dP.data;\n        newPrKey.dP.s = privateKey.dP.s;\n        newPrKey.dP.t = privateKey.dP.t;\n        newPrKey.dQ.data = privateKey.dQ.data;\n        newPrKey.dQ.s = privateKey.dQ.s;\n        newPrKey.dQ.t = privateKey.dQ.t;\n        newPrKey.e.data = privateKey.e.data;\n        newPrKey.e.s = privateKey.e.s;\n        newPrKey.e.t = privateKey.e.t;\n        newPrKey.n.data = privateKey.n.data;\n        newPrKey.n.s = privateKey.n.s;\n        newPrKey.n.t = privateKey.n.t;\n        newPrKey.p.data = privateKey.p.data;\n        newPrKey.p.s = privateKey.p.s;\n        newPrKey.p.t = privateKey.p.t;\n        newPrKey.q.data = privateKey.q.data;\n        newPrKey.q.s = privateKey.q.s;\n        newPrKey.q.t = privateKey.q.t;\n        newPrKey.qInv.data = privateKey.qInv.data;\n        newPrKey.qInv.s = privateKey.qInv.s;\n        newPrKey.qInv.t = privateKey.qInv.t;\n        return forge.util.decodeUtf8(yield newPrKey.decrypt(message));\n      })();\n    }\n\n  }\n\n  RSAService.ɵfac = function RSAService_Factory(t) {\n    return new (t || RSAService)();\n  };\n\n  RSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RSAService,\n    factory: RSAService.ɵfac,\n    providedIn: 'root'\n  });\n  return RSAService;\n})();","map":null,"metadata":{},"sourceType":"module"}