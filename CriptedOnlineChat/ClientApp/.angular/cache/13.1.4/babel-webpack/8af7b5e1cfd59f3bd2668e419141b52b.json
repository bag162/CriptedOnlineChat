{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport * as forge from 'node-forge';\nlet RSAService = class RSAService {\n  constructor(publicKey, privateKey) {\n    if (publicKey == undefined) {\n      this.GenerateKeyPair().then(x => {\n        this.privateKey = x.privateKey;\n        this.publicKey = x.publicKey;\n      });\n    } else {\n      this.publicKey = publicKey;\n      this.privateKey = privateKey;\n    }\n\n    forge.pki.rsa.setPrivateKey(privateKey.n, privateKey.e, privateKey.d, privateKey.p, privateKey.q, privateKey.dP, privateKey.dQ, privateKey.qInv);\n    forge.pki.rsa.setPublicKey(publicKey.n, publicKey.e);\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.publicKey != undefined) {\n        let encriptedMessage = yield _this.publicKey.encrypt(message);\n        return encriptedMessage;\n      } else {\n        return \"undefined\"; // убрать костыль\n      }\n    })();\n  }\n\n  DecriptMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.privateKey != undefined) {\n        let decriptedMessage = yield _this2.privateKey.decrypt(message);\n        return decriptedMessage;\n      } else {\n        return \"undefined\"; // тут то же убра\n      }\n    })();\n  }\n\n};\nRSAService = __decorate([Injectable({\n  providedIn: 'root'\n})], RSAService);\nexport { RSAService };","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["__decorate","Injectable","forge","RSAService","constructor","publicKey","privateKey","undefined","GenerateKeyPair","then","x","pki","rsa","setPrivateKey","n","e","d","p","q","dP","dQ","qInv","setPublicKey","keyPair","generateKeyPair","bits","EncriptMessage","message","encriptedMessage","encrypt","DecriptMessage","decriptedMessage","decrypt","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,IAAIC,UAAU,GAAG,MAAMA,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAACC,SAAD,EAAYC,UAAZ,EAAwB;AAC/B,QAAID,SAAS,IAAIE,SAAjB,EAA4B;AACxB,WAAKC,eAAL,GAAuBC,IAAvB,CAA4BC,CAAC,IAAI;AAC7B,aAAKJ,UAAL,GAAkBI,CAAC,CAACJ,UAApB;AACA,aAAKD,SAAL,GAAiBK,CAAC,CAACL,SAAnB;AACH,OAHD;AAIH,KALD,MAMK;AACD,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACDJ,IAAAA,KAAK,CAACS,GAAN,CAAUC,GAAV,CAAcC,aAAd,CAA4BP,UAAU,CAACQ,CAAvC,EAA0CR,UAAU,CAACS,CAArD,EAAwDT,UAAU,CAACU,CAAnE,EAAsEV,UAAU,CAACW,CAAjF,EAAoFX,UAAU,CAACY,CAA/F,EAAkGZ,UAAU,CAACa,EAA7G,EAAiHb,UAAU,CAACc,EAA5H,EAAgId,UAAU,CAACe,IAA3I;AACAnB,IAAAA,KAAK,CAACS,GAAN,CAAUC,GAAV,CAAcU,YAAd,CAA2BjB,SAAS,CAACS,CAArC,EAAwCT,SAAS,CAACU,CAAlD;AACH;;AACKP,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIe,OAAO,SAASrB,KAAK,CAACS,GAAN,CAAUC,GAAV,CAAcY,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcV,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAApB;AACA,aAAOQ,OAAP;AAFoB;AAGvB;;AACKG,EAAAA,cAAc,CAACC,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,KAAI,CAACtB,SAAL,IAAkBE,SAAtB,EAAiC;AAC7B,YAAIqB,gBAAgB,SAAS,KAAI,CAACvB,SAAL,CAAewB,OAAf,CAAuBF,OAAvB,CAA7B;AACA,eAAOC,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AACKE,EAAAA,cAAc,CAACH,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACrB,UAAL,IAAmBC,SAAvB,EAAkC;AAC9B,YAAIwB,gBAAgB,SAAS,MAAI,CAACzB,UAAL,CAAgB0B,OAAhB,CAAwBL,OAAxB,CAA7B;AACA,eAAOI,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AApC6B,CAAlC;AAsCA5B,UAAU,GAAGH,UAAU,CAAC,CACpBC,UAAU,CAAC;AAAEgC,EAAAA,UAAU,EAAE;AAAd,CAAD,CADU,CAAD,EAEpB9B,UAFoB,CAAvB;AAGA,SAASA,UAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport * as forge from 'node-forge';\r\nlet RSAService = class RSAService {\r\n    constructor(publicKey, privateKey) {\r\n        if (publicKey == undefined) {\r\n            this.GenerateKeyPair().then(x => {\r\n                this.privateKey = x.privateKey;\r\n                this.publicKey = x.publicKey;\r\n            });\r\n        }\r\n        else {\r\n            this.publicKey = publicKey;\r\n            this.privateKey = privateKey;\r\n        }\r\n        forge.pki.rsa.setPrivateKey(privateKey.n, privateKey.e, privateKey.d, privateKey.p, privateKey.q, privateKey.dP, privateKey.dQ, privateKey.qInv);\r\n        forge.pki.rsa.setPublicKey(publicKey.n, publicKey.e);\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message) {\r\n        if (this.publicKey != undefined) {\r\n            let encriptedMessage = await this.publicKey.encrypt(message);\r\n            return encriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // убрать костыль\r\n        }\r\n    }\r\n    async DecriptMessage(message) {\r\n        if (this.privateKey != undefined) {\r\n            let decriptedMessage = await this.privateKey.decrypt(message);\r\n            return decriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // тут то же убра\r\n        }\r\n    }\r\n};\r\nRSAService = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], RSAService);\r\nexport { RSAService };\r\n"]},"metadata":{},"sourceType":"module"}