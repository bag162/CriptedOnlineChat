{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nconst message = \"Вот такое вот секретное сообщение\";\nexport class RSAService {\n  constructor() {}\n\n  GenerateKeyPairs() {\n    return _asyncToGenerator(function* () {\n      let keysPairUser1 = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      let keysPairUser2 = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      console.log(\"user 1 keys: \" + keysPairUser1);\n      console.log(\"public key: \" + keysPair.publicKey.n.toString() + \" , private key: \" + keysPair.privateKey.n.toString());\n      let encriptedPrivateKey = yield forge.pki.encryptRsaPrivateKey(keysPair.privateKey, message);\n      return keys;\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\n\nclass KeyPairs {\n  constructor(publicKey, privateKey) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","message","RSAService","constructor","GenerateKeyPairs","keysPairUser1","pki","rsa","generateKeyPair","bits","e","keysPairUser2","console","log","keysPair","publicKey","n","toString","privateKey","encriptedPrivateKey","encryptRsaPrivateKey","keys","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","KeyPairs"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,MAAMC,OAAO,GAAG,mCAAhB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;AACrB,UAAIC,aAAa,SAASN,KAAK,CAACO,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAA1B;AACA,UAAIC,aAAa,SAASZ,KAAK,CAACO,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAA1B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBR,aAA9B;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBC,QAAQ,CAACC,SAAT,CAAmBC,CAAnB,CAAqBC,QAArB,EAAjB,GAAmD,kBAAnD,GAAwEH,QAAQ,CAACI,UAAT,CAAoBF,CAApB,CAAsBC,QAAtB,EAApF;AACA,UAAIE,mBAAmB,SAASpB,KAAK,CAACO,GAAN,CAAUc,oBAAV,CAA+BN,QAAQ,CAACI,UAAxC,EAAoDjB,OAApD,CAAhC;AACA,aAAOoB,IAAP;AANqB;AAOxB;;AAVmB;;AAYxBnB,UAAU,CAACoB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAItB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACuB,KAAX,GAAmB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,UAAT;AAAqB0B,EAAAA,OAAO,EAAE1B,UAAU,CAACoB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC;;AACA,MAAMC,QAAN,CAAe;AACX3B,EAAAA,WAAW,CAACY,SAAD,EAAYG,UAAZ,EAAwB;AAC/B,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKG,UAAL,GAAkBA,UAAlB;AACH;;AAJU","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nconst message = \"Вот такое вот секретное сообщение\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async GenerateKeyPairs() {\r\n        let keysPairUser1 = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        let keysPairUser2 = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        console.log(\"user 1 keys: \" + keysPairUser1);\r\n        console.log(\"public key: \" + keysPair.publicKey.n.toString() + \" , private key: \" + keysPair.privateKey.n.toString());\r\n        let encriptedPrivateKey = await forge.pki.encryptRsaPrivateKey(keysPair.privateKey, message);\r\n        return keys;\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nclass KeyPairs {\r\n    constructor(publicKey, privateKey) {\r\n        this.publicKey = publicKey;\r\n        this.privateKey = privateKey;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}