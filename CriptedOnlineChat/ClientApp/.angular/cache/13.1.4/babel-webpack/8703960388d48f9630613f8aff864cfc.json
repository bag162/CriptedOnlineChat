{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate, __param } from \"tslib\";\nimport { Inject, Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nlet WebSocketService = class WebSocketService {\n  constructor(baseUrl, appDB, messageService, RSAService, RSAKeysService) {\n    this.baseUrl = baseUrl + \"schatHub\";\n    this.RSAKeysService = RSAKeysService;\n    this.messageService = messageService;\n    this.appDB = appDB;\n    this.RSAService = RSAService;\n    this.HubConnection = new HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(\"http://localhost:5172/schatHub\").build();\n    this.HubConnection.start();\n    this.initWebSocket();\n  }\n\n  initWebSocket() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.HubConnection.on(\"Test\", message => {\n        console.log(message);\n      });\n      yield _this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => {\n        _this.RSAKeysService.AddNewRSAKeysServer(rsaKeys);\n      });\n      yield _this.HubConnection.on(\"AddNewMessages\", messages => {\n        _this.messageService.AddNewMessages(messages);\n      });\n    })();\n  }\n\n  sendMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.HubConnection.send(\"SendMessage\", message);\n    })();\n  }\n\n  SendPublicRSAKey(rsaKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.HubConnection.send(\"SendRSAKeys\", rsaKey);\n    })();\n  }\n\n};\nWebSocketService = __decorate([Injectable({\n  providedIn: 'root'\n}), __param(0, Inject('BASE_URL'))], WebSocketService);\nexport { WebSocketService };","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/WebSocket.service.ts"],"names":["__decorate","__param","Inject","Injectable","signalR","HubConnectionBuilder","WebSocketService","constructor","baseUrl","appDB","messageService","RSAService","RSAKeysService","HubConnection","configureLogging","LogLevel","Debug","withUrl","build","start","initWebSocket","on","message","console","log","rsaKeys","AddNewRSAKeysServer","messages","AddNewMessages","sendMessage","send","SendPublicRSAKey","rsaKey","providedIn"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,eAAnC;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,IAAIC,gBAAgB,GAAG,MAAMA,gBAAN,CAAuB;AAC1CC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,cAAjB,EAAiCC,UAAjC,EAA6CC,cAA7C,EAA6D;AACpE,SAAKJ,OAAL,GAAeA,OAAO,GAAG,UAAzB;AACA,SAAKI,cAAL,GAAsBA,cAAtB;AACA,SAAKF,cAAL,GAAsBA,cAAtB;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,UAAL,GAAkBA,UAAlB;AACA,SAAKE,aAAL,GAAqB,IAAIR,oBAAJ,GAChBS,gBADgB,CACCV,OAAO,CAACW,QAAR,CAAiBC,KADlB,EAEhBC,OAFgB,CAER,gCAFQ,EAGhBC,KAHgB,EAArB;AAIA,SAAKL,aAAL,CAAmBM,KAAnB;AACA,SAAKC,aAAL;AACH;;AACKA,EAAAA,aAAa,GAAG;AAAA;;AAAA;AAClB,YAAM,KAAI,CAACP,aAAL,CAAmBQ,EAAnB,CAAsB,MAAtB,EAA8BC,OAAO,IAAI;AAAEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAAuB,OAAlE,CAAN;AACA,YAAM,KAAI,CAACT,aAAL,CAAmBQ,EAAnB,CAAsB,eAAtB,EAAuCI,OAAO,IAAI;AAAE,QAAA,KAAI,CAACb,cAAL,CAAoBc,mBAApB,CAAwCD,OAAxC;AAAmD,OAAvG,CAAN;AACA,YAAM,KAAI,CAACZ,aAAL,CAAmBQ,EAAnB,CAAsB,gBAAtB,EAAwCM,QAAQ,IAAI;AAAE,QAAA,KAAI,CAACjB,cAAL,CAAoBkB,cAApB,CAAmCD,QAAnC;AAA+C,OAArG,CAAN;AAHkB;AAIrB;;AACKE,EAAAA,WAAW,CAACP,OAAD,EAAU;AAAA;;AAAA;AACvB,YAAM,MAAI,CAACT,aAAL,CAAmBiB,IAAnB,CAAwB,aAAxB,EAAuCR,OAAvC,CAAN;AADuB;AAE1B;;AACKS,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AAAA;;AAAA;AAC3B,YAAM,MAAI,CAACnB,aAAL,CAAmBiB,IAAnB,CAAwB,aAAxB,EAAuCE,MAAvC,CAAN;AAD2B;AAE9B;;AAxByC,CAA9C;AA0BA1B,gBAAgB,GAAGN,UAAU,CAAC,CAC1BG,UAAU,CAAC;AAAE8B,EAAAA,UAAU,EAAE;AAAd,CAAD,CADgB,EAE1BhC,OAAO,CAAC,CAAD,EAAIC,MAAM,CAAC,UAAD,CAAV,CAFmB,CAAD,EAG1BI,gBAH0B,CAA7B;AAIA,SAASA,gBAAT","sourcesContent":["import { __decorate, __param } from \"tslib\";\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nlet WebSocketService = class WebSocketService {\r\n    constructor(baseUrl, appDB, messageService, RSAService, RSAKeysService) {\r\n        this.baseUrl = baseUrl + \"schatHub\";\r\n        this.RSAKeysService = RSAKeysService;\r\n        this.messageService = messageService;\r\n        this.appDB = appDB;\r\n        this.RSAService = RSAService;\r\n        this.HubConnection = new HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(\"http://localhost:5172/schatHub\")\r\n            .build();\r\n        this.HubConnection.start();\r\n        this.initWebSocket();\r\n    }\r\n    async initWebSocket() {\r\n        await this.HubConnection.on(\"Test\", message => { console.log(message); });\r\n        await this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => { this.RSAKeysService.AddNewRSAKeysServer(rsaKeys); });\r\n        await this.HubConnection.on(\"AddNewMessages\", messages => { this.messageService.AddNewMessages(messages); });\r\n    }\r\n    async sendMessage(message) {\r\n        await this.HubConnection.send(\"SendMessage\", message);\r\n    }\r\n    async SendPublicRSAKey(rsaKey) {\r\n        await this.HubConnection.send(\"SendRSAKeys\", rsaKey);\r\n    }\r\n};\r\nWebSocketService = __decorate([\r\n    Injectable({ providedIn: 'root' }),\r\n    __param(0, Inject('BASE_URL'))\r\n], WebSocketService);\r\nexport { WebSocketService };\r\n"]},"metadata":{},"sourceType":"module"}