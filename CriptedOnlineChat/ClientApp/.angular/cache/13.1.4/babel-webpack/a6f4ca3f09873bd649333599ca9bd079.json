{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\n\nconst NodeRSA = require('node-rsa');\n\nconst key = new NodeRSA({\n  b: 512\n});\nexport class RSAService {\n  constructor() {}\n\n  GenerateKeyPairs() {\n    return _asyncToGenerator(function* () {\n      let keysPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      console.log(keysPair.privateKey);\n      console.log(\"NodeRSAKey: \" + key);\n      let keys = new KeyPairs(keysPair.publicKey.e.toString(), keysPair.privateKey.e.toString());\n      return keys;\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\n\nclass KeyPairs {\n  constructor(publicKey, privateKey) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","NodeRSA","require","key","b","RSAService","constructor","GenerateKeyPairs","keysPair","pki","rsa","generateKeyPair","bits","e","console","log","privateKey","keys","KeyPairs","publicKey","toString","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,GAAG,GAAG,IAAIF,OAAJ,CAAY;AAAEG,EAAAA,CAAC,EAAE;AAAL,CAAZ,CAAZ;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;AACrB,UAAIC,QAAQ,SAAST,KAAK,CAACU,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACQ,UAArB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBZ,GAA7B;AACA,UAAIc,IAAI,GAAG,IAAIC,QAAJ,CAAaV,QAAQ,CAACW,SAAT,CAAmBN,CAAnB,CAAqBO,QAArB,EAAb,EAA8CZ,QAAQ,CAACQ,UAAT,CAAoBH,CAApB,CAAsBO,QAAtB,EAA9C,CAAX;AACA,aAAOH,IAAP;AALqB;AAMxB;;AATmB;;AAWxBZ,UAAU,CAACgB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIlB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACmB,KAAX,GAAmB,aAAcxB,EAAE,CAACyB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErB,UAAT;AAAqBsB,EAAAA,OAAO,EAAEtB,UAAU,CAACgB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC;;AACA,MAAMV,QAAN,CAAe;AACXZ,EAAAA,WAAW,CAACa,SAAD,EAAYH,UAAZ,EAAwB;AAC/B,SAAKG,SAAL,GAAiBA,SAAjB;AACA,SAAKH,UAAL,GAAkBA,UAAlB;AACH;;AAJU","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nconst NodeRSA = require('node-rsa');\r\nconst key = new NodeRSA({ b: 512 });\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async GenerateKeyPairs() {\r\n        let keysPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        console.log(keysPair.privateKey);\r\n        console.log(\"NodeRSAKey: \" + key);\r\n        let keys = new KeyPairs(keysPair.publicKey.e.toString(), keysPair.privateKey.e.toString());\r\n        return keys;\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nclass KeyPairs {\r\n    constructor(publicKey, privateKey) {\r\n        this.publicKey = publicKey;\r\n        this.privateKey = privateKey;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}