{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as forge from 'node-forge';\nimport { v4 as uuidv4 } from 'uuid';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/db\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"./rsa.service\";\nexport class WebSocketService {\n  constructor(appDB, messageService, RSAService) {\n    this.messageService = messageService;\n    this.appDB = appDB;\n    this.RSAService = RSAService;\n    this.HubConnection = new HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(environment.basePath + \":\" + environment.basePort + \"/schatHub\", {\n      transport: signalR.HttpTransportType.WebSockets\n    }).build();\n    this.HubConnection.start();\n    this.initWebSocket();\n  }\n\n  initWebSocket() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.HubConnection.on(\"Test\", message => {\n        console.log(message);\n      });\n      yield _this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => {\n        _this.AddNewRSAKeysServer(rsaKeys);\n      });\n      yield _this.HubConnection.on(\"AddNewMessages\", messages => {\n        _this.messageService.AddNewMessages(messages);\n      });\n    })();\n  }\n\n  sendMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.HubConnection.send(\"SendMessage\", message);\n    })();\n  }\n\n  SendPublicRSAKey(rsaKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.HubConnection.send(\"SendRSAKeys\", rsaKey);\n    })();\n  }\n\n  AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let pubKey = {\n        id: idKey,\n        n: key.n,\n        e: key.e\n      };\n\n      if (isRecipientKey) {\n        _this4.appDB.PublicKeyForEncript.add(pubKey);\n      } else {\n        _this4.appDB.PublicKey.add(pubKey);\n      }\n    })();\n  }\n\n  AddPrivateKeyToLocalDB(privateKey, idKey) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let prKey = {\n        id: idKey,\n        n: privateKey.n,\n        e: privateKey.e,\n        d: privateKey.d,\n        p: privateKey.p,\n        q: privateKey.q,\n        dP: privateKey.dP,\n        dQ: privateKey.dQ,\n        qInv: privateKey.qInv\n      };\n      yield _this5.appDB.PrivateKey.add(prKey);\n    })();\n  }\n\n  SendRSAPublicKey(senderid, recipientId, pubKey) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let sendedRsa = {\n        senderUserId: senderid,\n        recipientUserId: recipientId,\n        nDataJson: JSON.stringify(pubKey.n.data),\n        ns: pubKey.n.s,\n        nt: pubKey.n.t,\n        eDataJson: JSON.stringify(pubKey.e.data),\n        es: pubKey.e.s,\n        et: pubKey.e.t\n      };\n      yield _this6.SendPublicRSAKey(sendedRsa);\n    })();\n  }\n\n  AddNewRSAKeysServer(keys) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      keys.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          // parsing data\n          let insertedPubKey = {\n            id: uuidv4()\n          }; // parse n data\n\n          let n = new forge.jsbn.BigInteger(null);\n          n.s = element.ns;\n          n.t = element.nt;\n          n.data = JSON.parse(element.nDataJson); // parse e data\n\n          let e = new forge.jsbn.BigInteger(null);\n          e.s = element.es;\n          e.t = element.et;\n          e.data = JSON.parse(element.eDataJson);\n          insertedPubKey.e = e;\n          insertedPubKey.n = n; // add to db\n\n          _this7.appDB.PublicKeyForEncript.add(insertedPubKey);\n\n          let isContaints = (yield _this7.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count()) == 0;\n\n          if (isContaints) {\n            var keyPair = yield _this7.RSAService.GenerateKeyPair();\n            let pubKeyId = uuidv4();\n            let prtKeyId = uuidv4();\n            yield _this7.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\n            yield _this7.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\n            yield _this7.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\n            let newContact = {\n              Login: element.senderLogin\n            };\n            newContact.ContactId = element.senderUserId;\n            newContact.Login = element.senderLogin;\n            newContact.PublicKeyForEncriptId = insertedPubKey.id;\n            newContact.PrivateKeyId = prtKeyId;\n            newContact.PublicKeyId = pubKeyId;\n\n            _this7.appDB.Contacts.add(newContact);\n          } else {\n            var contact = yield _this7.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).first();\n            yield _this7.appDB.Contacts.update(contact, {\n              \"PublicKeyForEncriptId\": insertedPubKey.id\n            });\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.RSAService));\n};\n\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/websocket.service.ts"],"names":["signalR","HubConnectionBuilder","forge","v4","uuidv4","environment","i0","i1","i2","i3","WebSocketService","constructor","appDB","messageService","RSAService","HubConnection","configureLogging","LogLevel","Debug","withUrl","basePath","basePort","transport","HttpTransportType","WebSockets","build","start","initWebSocket","on","message","console","log","rsaKeys","AddNewRSAKeysServer","messages","AddNewMessages","sendMessage","send","SendPublicRSAKey","rsaKey","AddPublicKeyToLocalDB","key","isRecipientKey","idKey","pubKey","id","n","e","PublicKeyForEncript","add","PublicKey","AddPrivateKeyToLocalDB","privateKey","prKey","d","p","q","dP","dQ","qInv","PrivateKey","SendRSAPublicKey","senderid","recipientId","sendedRsa","senderUserId","recipientUserId","nDataJson","JSON","stringify","data","ns","s","nt","t","eDataJson","es","et","keys","forEach","element","insertedPubKey","jsbn","BigInteger","parse","isContaints","Contacts","filter","x","ContactId","count","keyPair","GenerateKeyPair","pubKeyId","prtKeyId","publicKey","newContact","Login","senderLogin","PublicKeyForEncriptId","PrivateKeyId","PublicKeyId","contact","first","update","ɵfac","WebSocketService_Factory","ɵɵinject","AppDB","MessageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport * as forge from 'node-forge';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/db\";\r\nimport * as i2 from \"./message.service\";\r\nimport * as i3 from \"./rsa.service\";\r\nexport class WebSocketService {\r\n    constructor(appDB, messageService, RSAService) {\r\n        this.messageService = messageService;\r\n        this.appDB = appDB;\r\n        this.RSAService = RSAService;\r\n        this.HubConnection = new HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(environment.basePath + \":\" + environment.basePort + \"/schatHub\", {\r\n            transport: signalR.HttpTransportType.WebSockets\r\n        })\r\n            .build();\r\n        this.HubConnection.start();\r\n        this.initWebSocket();\r\n    }\r\n    async initWebSocket() {\r\n        await this.HubConnection.on(\"Test\", message => { console.log(message); });\r\n        await this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => { this.AddNewRSAKeysServer(rsaKeys); });\r\n        await this.HubConnection.on(\"AddNewMessages\", messages => { this.messageService.AddNewMessages(messages); });\r\n    }\r\n    async sendMessage(message) {\r\n        await this.HubConnection.send(\"SendMessage\", message);\r\n    }\r\n    async SendPublicRSAKey(rsaKey) {\r\n        await this.HubConnection.send(\"SendRSAKeys\", rsaKey);\r\n    }\r\n    async AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\r\n        let pubKey = { id: idKey, n: key.n, e: key.e };\r\n        if (isRecipientKey) {\r\n            this.appDB.PublicKeyForEncript.add(pubKey);\r\n        }\r\n        else {\r\n            this.appDB.PublicKey.add(pubKey);\r\n        }\r\n    }\r\n    async AddPrivateKeyToLocalDB(privateKey, idKey) {\r\n        let prKey = {\r\n            id: idKey, n: privateKey.n, e: privateKey.e,\r\n            d: privateKey.d, p: privateKey.p, q: privateKey.q,\r\n            dP: privateKey.dP, dQ: privateKey.dQ, qInv: privateKey.qInv\r\n        };\r\n        await this.appDB.PrivateKey.add(prKey);\r\n    }\r\n    async SendRSAPublicKey(senderid, recipientId, pubKey) {\r\n        let sendedRsa = {\r\n            senderUserId: senderid,\r\n            recipientUserId: recipientId, nDataJson: JSON.stringify(pubKey.n.data),\r\n            ns: pubKey.n.s, nt: pubKey.n.t, eDataJson: JSON.stringify(pubKey.e.data), es: pubKey.e.s, et: pubKey.e.t\r\n        };\r\n        await this.SendPublicRSAKey(sendedRsa);\r\n    }\r\n    async AddNewRSAKeysServer(keys) {\r\n        keys.forEach(async (element) => {\r\n            // parsing data\r\n            let insertedPubKey = { id: uuidv4() };\r\n            // parse n data\r\n            let n = new forge.jsbn.BigInteger(null);\r\n            n.s = element.ns;\r\n            n.t = element.nt;\r\n            n.data = JSON.parse(element.nDataJson);\r\n            // parse e data\r\n            let e = new forge.jsbn.BigInteger(null);\r\n            e.s = element.es;\r\n            e.t = element.et;\r\n            e.data = JSON.parse(element.eDataJson);\r\n            insertedPubKey.e = e;\r\n            insertedPubKey.n = n;\r\n            // add to db\r\n            this.appDB.PublicKeyForEncript.add(insertedPubKey);\r\n            let isContaints = await this.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count() == 0;\r\n            if (isContaints) {\r\n                var keyPair = await this.RSAService.GenerateKeyPair();\r\n                let pubKeyId = uuidv4();\r\n                let prtKeyId = uuidv4();\r\n                await this.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\r\n                await this.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\r\n                await this.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\r\n                let newContact = { Login: element.senderLogin };\r\n                newContact.ContactId = element.senderUserId;\r\n                newContact.Login = element.senderLogin;\r\n                newContact.PublicKeyForEncriptId = insertedPubKey.id;\r\n                newContact.PrivateKeyId = prtKeyId;\r\n                newContact.PublicKeyId = pubKeyId;\r\n                this.appDB.Contacts.add(newContact);\r\n            }\r\n            else {\r\n                var contact = await this.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).first();\r\n                await this.appDB.Contacts.update(contact, { \"PublicKeyForEncriptId\": insertedPubKey.id });\r\n            }\r\n        });\r\n    }\r\n}\r\nWebSocketService.ɵfac = function WebSocketService_Factory(t) { return new (t || WebSocketService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.RSAService)); };\r\nWebSocketService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WebSocketService, factory: WebSocketService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}