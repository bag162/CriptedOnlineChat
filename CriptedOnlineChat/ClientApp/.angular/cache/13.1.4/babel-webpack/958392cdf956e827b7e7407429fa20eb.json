{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  // constructor(@Inject(forge.pki.rsa)publicKey: forge.pki.rsa.PublicKey, @Inject(forge.pki.rsa)privateKey: forge.pki.rsa.PrivateKey) {\n  //     if (publicKey == undefined) {\n  //         this.GenerateKeyPair().then(x => {\n  //             this.privateKey = x.privateKey\n  //             this.publicKey = x.publicKey;\n  //         });\n  //     }\n  //     else {\n  //         this.publicKey = publicKey;\n  //         this.privateKey = privateKey;\n  //     }\n  //     forge.pki.rsa.setPrivateKey(privateKey.n, privateKey.e, privateKey.d, privateKey.p, privateKey.q, privateKey.dP, privateKey.dQ, privateKey.qInv);\n  //     forge.pki.rsa.setPublicKey(publicKey.n, publicKey.e);\n  // }\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.publicKey != undefined) {\n        let encriptedMessage = yield _this.publicKey.encrypt(message);\n        return encriptedMessage;\n      } else {\n        return \"undefined\"; // убрать костыль\n      }\n    })();\n  }\n\n  DecriptMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.privateKey != undefined) {\n        let decriptedMessage = yield _this2.privateKey.decrypt(message);\n        return decriptedMessage;\n      } else {\n        return \"undefined\"; // тут то же убрать\n      }\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","RSAService","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","EncriptMessage","message","publicKey","undefined","encriptedMessage","encrypt","DecriptMessage","privateKey","decriptedMessage","decrypt","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIC,OAAO,SAASJ,KAAK,CAACK,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAApB;AACA,aAAOL,OAAP;AAFoB;AAGvB;;AACKM,EAAAA,cAAc,CAACC,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,KAAI,CAACC,SAAL,IAAkBC,SAAtB,EAAiC;AAC7B,YAAIC,gBAAgB,SAAS,KAAI,CAACF,SAAL,CAAeG,OAAf,CAAuBJ,OAAvB,CAA7B;AACA,eAAOG,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AACKE,EAAAA,cAAc,CAACL,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACM,UAAL,IAAmBJ,SAAvB,EAAkC;AAC9B,YAAIK,gBAAgB,SAAS,MAAI,CAACD,UAAL,CAAgBE,OAAhB,CAAwBR,OAAxB,CAA7B;AACA,eAAOO,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AApCmB;;AAsCxBhB,UAAU,CAACkB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIpB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACqB,KAAX,GAAmB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvB,UAAT;AAAqBwB,EAAAA,OAAO,EAAExB,UAAU,CAACkB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    // constructor(@Inject(forge.pki.rsa)publicKey: forge.pki.rsa.PublicKey, @Inject(forge.pki.rsa)privateKey: forge.pki.rsa.PrivateKey) {\r\n    //     if (publicKey == undefined) {\r\n    //         this.GenerateKeyPair().then(x => {\r\n    //             this.privateKey = x.privateKey\r\n    //             this.publicKey = x.publicKey;\r\n    //         });\r\n    //     }\r\n    //     else {\r\n    //         this.publicKey = publicKey;\r\n    //         this.privateKey = privateKey;\r\n    //     }\r\n    //     forge.pki.rsa.setPrivateKey(privateKey.n, privateKey.e, privateKey.d, privateKey.p, privateKey.q, privateKey.dP, privateKey.dQ, privateKey.qInv);\r\n    //     forge.pki.rsa.setPublicKey(publicKey.n, publicKey.e);\r\n    // }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message) {\r\n        if (this.publicKey != undefined) {\r\n            let encriptedMessage = await this.publicKey.encrypt(message);\r\n            return encriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // убрать костыль\r\n        }\r\n    }\r\n    async DecriptMessage(message) {\r\n        if (this.privateKey != undefined) {\r\n            let decriptedMessage = await this.privateKey.decrypt(message);\r\n            return decriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // тут то же убрать\r\n        }\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}