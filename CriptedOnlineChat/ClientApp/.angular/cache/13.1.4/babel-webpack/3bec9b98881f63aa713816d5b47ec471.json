{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor() {}\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      let encriptedMessage = yield publicKey.encrypt(message);\n      return encriptedMessage;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.privateKey != undefined) {\n        let decriptedMessage = yield _this.privateKey.decrypt(message);\n        return decriptedMessage;\n      } else {\n        return \"undefined\"; // тут то же убрать\n      }\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","RSAService","constructor","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","EncriptMessage","message","publicKey","encriptedMessage","encrypt","DecriptMessage","privateKey","undefined","decriptedMessage","decrypt","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIC,OAAO,SAASL,KAAK,CAACM,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAApB;AACA,aAAOL,OAAP;AAFoB;AAGvB;;AACKM,EAAAA,cAAc,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAAA;AACrC,UAAIC,gBAAgB,SAASD,SAAS,CAACE,OAAV,CAAkBH,OAAlB,CAA7B;AACA,aAAOE,gBAAP;AAFqC;AAGxC;;AACKE,EAAAA,cAAc,CAACJ,OAAD,EAAUK,UAAV,EAAsB;AAAA;;AAAA;AACtC,UAAI,KAAI,CAACA,UAAL,IAAmBC,SAAvB,EAAkC;AAC9B,YAAIC,gBAAgB,SAAS,KAAI,CAACF,UAAL,CAAgBG,OAAhB,CAAwBR,OAAxB,CAA7B;AACA,eAAOO,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPqC;AAQzC;;AAnBmB;;AAqBxBjB,UAAU,CAACmB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIrB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACsB,KAAX,GAAmB,aAAcvB,EAAE,CAACwB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAExB,UAAT;AAAqByB,EAAAA,OAAO,EAAEzB,UAAU,CAACmB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        let encriptedMessage = await publicKey.encrypt(message);\r\n        return encriptedMessage;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        if (this.privateKey != undefined) {\r\n            let decriptedMessage = await this.privateKey.decrypt(message);\r\n            return decriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // тут то же убрать\r\n        }\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}