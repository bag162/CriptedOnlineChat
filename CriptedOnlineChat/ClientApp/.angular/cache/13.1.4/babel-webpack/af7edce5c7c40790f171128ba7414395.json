{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FindUserDTO } from 'src/app/Services/user.service';\nimport { v4 as uuidv4 } from 'uuid';\nlet ContactListComponent = class ContactListComponent {\n  constructor(db, DataService, userService, rsaService, contactService, rsaKeysService) {\n    this.contactList = []; // Search variables\n\n    this.searchUserLogin = new FindUserDTO();\n    this.isSearchMode = false;\n    this.db = db;\n    this.DataService = DataService;\n    this.userService = userService;\n    this.rsaService = rsaService;\n    this.ContactService = contactService;\n    this.rsaKeysService = rsaKeysService;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.fillContactList(); // submint searsh input when pressing enter\n\n      $(document).ready(function () {\n        $('input').keydown(function (e) {\n          if (e.keyCode === 13) {\n            $('.searchLoginInfo').click();\n          }\n        });\n      });\n    })();\n  }\n\n  fillContactList() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.contactList = yield _this2.db.Contacts.toArray();\n    })();\n  }\n\n  ChangeDisplayedMessages(newDesplayedUserLogin) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.isSearchMode) {\n        _this3.isSearchMode = false;\n\n        _this3.AddNewUserToLocalDb(newDesplayedUserLogin);\n\n        yield _this3.fillContactList();\n      }\n\n      _this3.DataService.currentDisplayedLogin.next(newDesplayedUserLogin.Login);\n    })();\n  }\n\n  searchUsers() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.searchUserLogin.login == \"\") {\n        return;\n      }\n\n      _this4.isSearchMode = true; // Получаем пользователей по запросу\n\n      let newDispayedUsers = [];\n      let result = yield _this4.userService.FindUsers(_this4.searchUserLogin); // TODO take preloader\n\n      result.forEach(element => {\n        var newContact = {\n          Login: element.login,\n          ContactId: element.id\n        };\n        newDispayedUsers.push(newContact);\n      }); // Получаем пользователей находящихся в базе\n\n      var currentUsers = yield _this4.db.Contacts.toArray(); // Удаляем в списке пользователей, которые уже есть в контах\n\n      currentUsers.forEach(element => {\n        newDispayedUsers.forEach(element1 => {\n          if (element.Login == element1.Login) {\n            newDispayedUsers.splice(newDispayedUsers.indexOf(element1), 1);\n          }\n        });\n      });\n      $(\".users\").hide(500);\n      setTimeout(() => {\n        _this4.contactList = newDispayedUsers;\n        $(\".searchUsersDisplay\").show(500);\n      }, 500);\n    })();\n  }\n\n  AddNewUserToLocalDb(newUser) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var insertedUser = newUser; // gen KeyPair\n\n      var rsaKeys = yield _this5.rsaService.GenerateKeyPair();\n      var publicKeyId = uuidv4();\n      var privateKeyId = uuidv4();\n      insertedUser.PrivateKeyId = privateKeyId;\n      insertedUser.PublicKeyId = publicKeyId;\n\n      _this5.ContactService.AddNewContact(insertedUser);\n\n      _this5.rsaKeysService.AddPrivateKeyToLocalDB(rsaKeys.privateKey, privateKeyId);\n\n      _this5.rsaKeysService.AddPublicKeyToLocalDB(rsaKeys.publicKey, false, publicKeyId);\n\n      _this5.backToContactListButton();\n\n      yield _this5.rsaKeysService.SendRSAPublicKey((yield _this5.db.User.toArray().then(x => {\n        return x[0];\n      })).id, insertedUser.ContactId, rsaKeys.publicKey); // реализовать что бы 2-ой пользователь при получании ключа сразу же то же отправлял свой обратно\n    })();\n  }\n\n  backToContactListButton() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.isSearchMode = false;\n      $(\".searchUsersDisplay\").hide(500);\n      yield _this6.fillContactList();\n      _this6.searchUserLogin.login = \"\";\n    })();\n  }\n\n};\nContactListComponent = __decorate([Component({\n  selector: 'contact-list-component',\n  templateUrl: './contact.list.component.html',\n  styleUrls: ['./contact.list.component.css']\n})], ContactListComponent);\nexport { ContactListComponent };","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/HomeComponent/ContactListComponent/contact.list.component.ts"],"names":["__decorate","Component","FindUserDTO","v4","uuidv4","ContactListComponent","constructor","db","DataService","userService","rsaService","contactService","rsaKeysService","contactList","searchUserLogin","isSearchMode","ContactService","ngOnInit","fillContactList","$","document","ready","keydown","e","keyCode","click","Contacts","toArray","ChangeDisplayedMessages","newDesplayedUserLogin","AddNewUserToLocalDb","currentDisplayedLogin","next","Login","searchUsers","login","newDispayedUsers","result","FindUsers","forEach","element","newContact","ContactId","id","push","currentUsers","element1","splice","indexOf","hide","setTimeout","show","newUser","insertedUser","rsaKeys","GenerateKeyPair","publicKeyId","privateKeyId","PrivateKeyId","PublicKeyId","AddNewContact","AddPrivateKeyToLocalDB","privateKey","AddPublicKeyToLocalDB","publicKey","backToContactListButton","SendRSAPublicKey","User","then","x","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FindUserDTO } from 'src/app/Services/user.service';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nlet ContactListComponent = class ContactListComponent {\r\n    constructor(db, DataService, userService, rsaService, contactService, rsaKeysService) {\r\n        this.contactList = [];\r\n        // Search variables\r\n        this.searchUserLogin = new FindUserDTO();\r\n        this.isSearchMode = false;\r\n        this.db = db;\r\n        this.DataService = DataService;\r\n        this.userService = userService;\r\n        this.rsaService = rsaService;\r\n        this.ContactService = contactService;\r\n        this.rsaKeysService = rsaKeysService;\r\n    }\r\n    async ngOnInit() {\r\n        await this.fillContactList();\r\n        // submint searsh input when pressing enter\r\n        $(document).ready(function () {\r\n            $('input').keydown(function (e) {\r\n                if (e.keyCode === 13) {\r\n                    $('.searchLoginInfo').click();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async fillContactList() {\r\n        this.contactList = await this.db.Contacts.toArray();\r\n    }\r\n    async ChangeDisplayedMessages(newDesplayedUserLogin) {\r\n        if (this.isSearchMode) {\r\n            this.isSearchMode = false;\r\n            this.AddNewUserToLocalDb(newDesplayedUserLogin);\r\n            await this.fillContactList();\r\n        }\r\n        this.DataService.currentDisplayedLogin.next(newDesplayedUserLogin.Login);\r\n    }\r\n    async searchUsers() {\r\n        if (this.searchUserLogin.login == \"\") {\r\n            return;\r\n        }\r\n        this.isSearchMode = true;\r\n        // Получаем пользователей по запросу\r\n        let newDispayedUsers = [];\r\n        let result = await this.userService.FindUsers(this.searchUserLogin); // TODO take preloader\r\n        result.forEach(element => {\r\n            var newContact = { Login: element.login, ContactId: element.id };\r\n            newDispayedUsers.push(newContact);\r\n        });\r\n        // Получаем пользователей находящихся в базе\r\n        var currentUsers = await this.db.Contacts.toArray();\r\n        // Удаляем в списке пользователей, которые уже есть в контах\r\n        currentUsers.forEach(element => {\r\n            newDispayedUsers.forEach(element1 => {\r\n                if (element.Login == element1.Login) {\r\n                    newDispayedUsers.splice(newDispayedUsers.indexOf(element1), 1);\r\n                }\r\n            });\r\n        });\r\n        $(\".users\").hide(500);\r\n        setTimeout(() => {\r\n            this.contactList = newDispayedUsers;\r\n            $(\".searchUsersDisplay\").show(500);\r\n        }, 500);\r\n    }\r\n    async AddNewUserToLocalDb(newUser) {\r\n        var insertedUser = newUser;\r\n        // gen KeyPair\r\n        var rsaKeys = await this.rsaService.GenerateKeyPair();\r\n        var publicKeyId = uuidv4();\r\n        var privateKeyId = uuidv4();\r\n        insertedUser.PrivateKeyId = privateKeyId;\r\n        insertedUser.PublicKeyId = publicKeyId;\r\n        this.ContactService.AddNewContact(insertedUser);\r\n        this.rsaKeysService.AddPrivateKeyToLocalDB(rsaKeys.privateKey, privateKeyId);\r\n        this.rsaKeysService.AddPublicKeyToLocalDB(rsaKeys.publicKey, false, publicKeyId);\r\n        this.backToContactListButton();\r\n        await this.rsaKeysService.SendRSAPublicKey((await this.db.User.toArray().then(x => { return x[0]; })).id, insertedUser.ContactId, rsaKeys.publicKey); // реализовать что бы 2-ой пользователь при получании ключа сразу же то же отправлял свой обратно\r\n    }\r\n    async backToContactListButton() {\r\n        this.isSearchMode = false;\r\n        $(\".searchUsersDisplay\").hide(500);\r\n        await this.fillContactList();\r\n        this.searchUserLogin.login = \"\";\r\n    }\r\n};\r\nContactListComponent = __decorate([\r\n    Component({\r\n        selector: 'contact-list-component',\r\n        templateUrl: './contact.list.component.html',\r\n        styleUrls: ['./contact.list.component.css'],\r\n    })\r\n], ContactListComponent);\r\nexport { ContactListComponent };\r\n"]},"metadata":{},"sourceType":"module"}