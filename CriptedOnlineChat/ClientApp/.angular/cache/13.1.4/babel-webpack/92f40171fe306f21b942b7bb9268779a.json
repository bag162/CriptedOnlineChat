{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"./rsa.keys.service\";\nexport class WebSocketService {\n  constructor(baseUrl, messageService, RSAKeysService) {\n    this.baseUrl = baseUrl + \"schatHub\";\n    this.RSAKeysService = RSAKeysService;\n    this.messageService = messageService;\n    this.HubConnection = new HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(\"http://localhost:5172/schatHub\").build();\n    this.HubConnection.start();\n    this.initWebSocket();\n  }\n\n  initWebSocket() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.HubConnection.on(\"Test\", message => {\n        console.log(message);\n      });\n      yield _this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => {\n        _this.RSAKeysService.AddNewRSAKeysServer(rsaKeys);\n      });\n      yield _this.HubConnection.on(\"AddNewMessages\", messages => {\n        _this.messageService.AddNewMessages(messages);\n      });\n    })();\n  }\n\n  sendMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.HubConnection.send(\"SendMessage\", message);\n    })();\n  }\n\n  SendPublicRSAKey(rsaKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.HubConnection.send(\"SendRSAKeys\", rsaKey);\n    })();\n  }\n\n  AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let pubKey = {\n        id: idKey,\n        n: key.n,\n        e: key.e\n      };\n\n      if (isRecipientKey) {\n        _this4.appDB.PublicKeyForEncript.add(pubKey);\n      } else {\n        _this4.appDB.PublicKey.add(pubKey);\n      }\n    })();\n  }\n\n  AddPrivateKeyToLocalDB(privateKey, idKey) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let prKey = {\n        id: idKey,\n        n: privateKey.n,\n        e: privateKey.e,\n        d: privateKey.d,\n        p: privateKey.p,\n        q: privateKey.q,\n        dP: privateKey.dP,\n        dQ: privateKey.dQ,\n        qInv: privateKey.qInv\n      };\n      yield _this5.appDB.PrivateKey.add(prKey);\n    })();\n  }\n\n  SendRSAPublicKey(senderid, recipientId, pubKey) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let sendedRsa = {\n        senderUserId: senderid,\n        recipientUserId: recipientId,\n        nDataJson: JSON.stringify(pubKey.n.data),\n        ns: pubKey.n.s,\n        nt: pubKey.n.t,\n        eDataJson: JSON.stringify(pubKey.e.data),\n        es: pubKey.e.s,\n        et: pubKey.e.t\n      };\n      yield _this6.WebSocketService.SendPublicRSAKey(sendedRsa);\n    })();\n  }\n\n  AddNewRSAKeysServer(keys) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      keys.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          // parsing data\n          let insertedPubKey = {\n            id: uuidv4()\n          }; // parse n data\n\n          let n = new forge.jsbn.BigInteger(null);\n          n.s = element.ns;\n          n.t = element.nt;\n          n.data = JSON.parse(element.nDataJson); // parse e data\n\n          let e = new forge.jsbn.BigInteger(null);\n          e.s = element.es;\n          e.t = element.et;\n          e.data = JSON.parse(element.eDataJson);\n          insertedPubKey.e = e;\n          insertedPubKey.n = n; // add to db\n\n          _this7.appDB.PublicKeyForEncript.add(insertedPubKey);\n\n          let isContaints = (yield _this7.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count()) == 0;\n\n          if (isContaints) {\n            var keyPair = yield _this7.rsaService.GenerateKeyPair();\n            let pubKeyId = uuidv4();\n            let prtKeyId = uuidv4();\n            yield _this7.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\n            yield _this7.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\n            yield _this7.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\n            let newContact = {\n              Login: element.senderLogin\n            };\n            newContact.ContactId = element.senderUserId;\n            newContact.Login = element.senderLogin;\n            newContact.PublicKeyForEncriptId = insertedPubKey.id;\n            newContact.PrivateKeyId = prtKeyId;\n            newContact.PublicKeyId = pubKeyId;\n\n            _this7.appDB.Contacts.add(newContact);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.RSAKeysService));\n};\n\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/websocket.service.ts"],"names":["signalR","HubConnectionBuilder","forge","i0","i1","i2","WebSocketService","constructor","baseUrl","messageService","RSAKeysService","HubConnection","configureLogging","LogLevel","Debug","withUrl","build","start","initWebSocket","on","message","console","log","rsaKeys","AddNewRSAKeysServer","messages","AddNewMessages","sendMessage","send","SendPublicRSAKey","rsaKey","AddPublicKeyToLocalDB","key","isRecipientKey","idKey","pubKey","id","n","e","appDB","PublicKeyForEncript","add","PublicKey","AddPrivateKeyToLocalDB","privateKey","prKey","d","p","q","dP","dQ","qInv","PrivateKey","SendRSAPublicKey","senderid","recipientId","sendedRsa","senderUserId","recipientUserId","nDataJson","JSON","stringify","data","ns","s","nt","t","eDataJson","es","et","keys","forEach","element","insertedPubKey","uuidv4","jsbn","BigInteger","parse","isContaints","Contacts","filter","x","ContactId","count","keyPair","rsaService","GenerateKeyPair","pubKeyId","prtKeyId","publicKey","newContact","Login","senderLogin","PublicKeyForEncriptId","PrivateKeyId","PublicKeyId","ɵfac","WebSocketService_Factory","ɵɵinject","MessageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,oBAAzB;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,OAAD,EAAUC,cAAV,EAA0BC,cAA1B,EAA0C;AACjD,SAAKF,OAAL,GAAeA,OAAO,GAAG,UAAzB;AACA,SAAKE,cAAL,GAAsBA,cAAtB;AACA,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKE,aAAL,GAAqB,IAAIV,oBAAJ,GAChBW,gBADgB,CACCZ,OAAO,CAACa,QAAR,CAAiBC,KADlB,EAEhBC,OAFgB,CAER,gCAFQ,EAGhBC,KAHgB,EAArB;AAIA,SAAKL,aAAL,CAAmBM,KAAnB;AACA,SAAKC,aAAL;AACH;;AACKA,EAAAA,aAAa,GAAG;AAAA;;AAAA;AAClB,YAAM,KAAI,CAACP,aAAL,CAAmBQ,EAAnB,CAAsB,MAAtB,EAA8BC,OAAO,IAAI;AAAEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAAuB,OAAlE,CAAN;AACA,YAAM,KAAI,CAACT,aAAL,CAAmBQ,EAAnB,CAAsB,eAAtB,EAAuCI,OAAO,IAAI;AAAE,QAAA,KAAI,CAACb,cAAL,CAAoBc,mBAApB,CAAwCD,OAAxC;AAAmD,OAAvG,CAAN;AACA,YAAM,KAAI,CAACZ,aAAL,CAAmBQ,EAAnB,CAAsB,gBAAtB,EAAwCM,QAAQ,IAAI;AAAE,QAAA,KAAI,CAAChB,cAAL,CAAoBiB,cAApB,CAAmCD,QAAnC;AAA+C,OAArG,CAAN;AAHkB;AAIrB;;AACKE,EAAAA,WAAW,CAACP,OAAD,EAAU;AAAA;;AAAA;AACvB,YAAM,MAAI,CAACT,aAAL,CAAmBiB,IAAnB,CAAwB,aAAxB,EAAuCR,OAAvC,CAAN;AADuB;AAE1B;;AACKS,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AAAA;;AAAA;AAC3B,YAAM,MAAI,CAACnB,aAAL,CAAmBiB,IAAnB,CAAwB,aAAxB,EAAuCE,MAAvC,CAAN;AAD2B;AAE9B;;AACKC,EAAAA,qBAAqB,CAACC,GAAD,EAAMC,cAAN,EAAsBC,KAAtB,EAA6B;AAAA;;AAAA;AACpD,UAAIC,MAAM,GAAG;AAAEC,QAAAA,EAAE,EAAEF,KAAN;AAAaG,QAAAA,CAAC,EAAEL,GAAG,CAACK,CAApB;AAAuBC,QAAAA,CAAC,EAAEN,GAAG,CAACM;AAA9B,OAAb;;AACA,UAAIL,cAAJ,EAAoB;AAChB,QAAA,MAAI,CAACM,KAAL,CAAWC,mBAAX,CAA+BC,GAA/B,CAAmCN,MAAnC;AACH,OAFD,MAGK;AACD,QAAA,MAAI,CAACI,KAAL,CAAWG,SAAX,CAAqBD,GAArB,CAAyBN,MAAzB;AACH;AAPmD;AAQvD;;AACKQ,EAAAA,sBAAsB,CAACC,UAAD,EAAaV,KAAb,EAAoB;AAAA;;AAAA;AAC5C,UAAIW,KAAK,GAAG;AACRT,QAAAA,EAAE,EAAEF,KADI;AACGG,QAAAA,CAAC,EAAEO,UAAU,CAACP,CADjB;AACoBC,QAAAA,CAAC,EAAEM,UAAU,CAACN,CADlC;AAERQ,QAAAA,CAAC,EAAEF,UAAU,CAACE,CAFN;AAESC,QAAAA,CAAC,EAAEH,UAAU,CAACG,CAFvB;AAE0BC,QAAAA,CAAC,EAAEJ,UAAU,CAACI,CAFxC;AAGRC,QAAAA,EAAE,EAAEL,UAAU,CAACK,EAHP;AAGWC,QAAAA,EAAE,EAAEN,UAAU,CAACM,EAH1B;AAG8BC,QAAAA,IAAI,EAAEP,UAAU,CAACO;AAH/C,OAAZ;AAKA,YAAM,MAAI,CAACZ,KAAL,CAAWa,UAAX,CAAsBX,GAAtB,CAA0BI,KAA1B,CAAN;AAN4C;AAO/C;;AACKQ,EAAAA,gBAAgB,CAACC,QAAD,EAAWC,WAAX,EAAwBpB,MAAxB,EAAgC;AAAA;;AAAA;AAClD,UAAIqB,SAAS,GAAG;AACZC,QAAAA,YAAY,EAAEH,QADF;AAEZI,QAAAA,eAAe,EAAEH,WAFL;AAEkBI,QAAAA,SAAS,EAAEC,IAAI,CAACC,SAAL,CAAe1B,MAAM,CAACE,CAAP,CAASyB,IAAxB,CAF7B;AAGZC,QAAAA,EAAE,EAAE5B,MAAM,CAACE,CAAP,CAAS2B,CAHD;AAGIC,QAAAA,EAAE,EAAE9B,MAAM,CAACE,CAAP,CAAS6B,CAHjB;AAGoBC,QAAAA,SAAS,EAAEP,IAAI,CAACC,SAAL,CAAe1B,MAAM,CAACG,CAAP,CAASwB,IAAxB,CAH/B;AAG8DM,QAAAA,EAAE,EAAEjC,MAAM,CAACG,CAAP,CAAS0B,CAH3E;AAG8EK,QAAAA,EAAE,EAAElC,MAAM,CAACG,CAAP,CAAS4B;AAH3F,OAAhB;AAKA,YAAM,MAAI,CAAC5D,gBAAL,CAAsBuB,gBAAtB,CAAuC2B,SAAvC,CAAN;AANkD;AAOrD;;AACKhC,EAAAA,mBAAmB,CAAC8C,IAAD,EAAO;AAAA;;AAAA;AAC5BA,MAAAA,IAAI,CAACC,OAAL;AAAA,qCAAa,WAAOC,OAAP,EAAmB;AAC5B;AACA,cAAIC,cAAc,GAAG;AAAErC,YAAAA,EAAE,EAAEsC,MAAM;AAAZ,WAArB,CAF4B,CAG5B;;AACA,cAAIrC,CAAC,GAAG,IAAInC,KAAK,CAACyE,IAAN,CAAWC,UAAf,CAA0B,IAA1B,CAAR;AACAvC,UAAAA,CAAC,CAAC2B,CAAF,GAAMQ,OAAO,CAACT,EAAd;AACA1B,UAAAA,CAAC,CAAC6B,CAAF,GAAMM,OAAO,CAACP,EAAd;AACA5B,UAAAA,CAAC,CAACyB,IAAF,GAASF,IAAI,CAACiB,KAAL,CAAWL,OAAO,CAACb,SAAnB,CAAT,CAP4B,CAQ5B;;AACA,cAAIrB,CAAC,GAAG,IAAIpC,KAAK,CAACyE,IAAN,CAAWC,UAAf,CAA0B,IAA1B,CAAR;AACAtC,UAAAA,CAAC,CAAC0B,CAAF,GAAMQ,OAAO,CAACJ,EAAd;AACA9B,UAAAA,CAAC,CAAC4B,CAAF,GAAMM,OAAO,CAACH,EAAd;AACA/B,UAAAA,CAAC,CAACwB,IAAF,GAASF,IAAI,CAACiB,KAAL,CAAWL,OAAO,CAACL,SAAnB,CAAT;AACAM,UAAAA,cAAc,CAACnC,CAAf,GAAmBA,CAAnB;AACAmC,UAAAA,cAAc,CAACpC,CAAf,GAAmBA,CAAnB,CAd4B,CAe5B;;AACA,UAAA,MAAI,CAACE,KAAL,CAAWC,mBAAX,CAA+BC,GAA/B,CAAmCgC,cAAnC;;AACA,cAAIK,WAAW,GAAG,OAAM,MAAI,CAACvC,KAAL,CAAWwC,QAAX,CAAoBC,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,SAAF,IAAeV,OAAO,CAACf,YAAvD,EAAqE0B,KAArE,EAAN,KAAsF,CAAxG;;AACA,cAAIL,WAAJ,EAAiB;AACb,gBAAIM,OAAO,SAAS,MAAI,CAACC,UAAL,CAAgBC,eAAhB,EAApB;AACA,gBAAIC,QAAQ,GAAGb,MAAM,EAArB;AACA,gBAAIc,QAAQ,GAAGd,MAAM,EAArB;AACA,kBAAM,MAAI,CAAC3C,qBAAL,CAA2BqD,OAAO,CAACK,SAAnC,EAA8C,KAA9C,EAAqDF,QAArD,CAAN;AACA,kBAAM,MAAI,CAAC5C,sBAAL,CAA4ByC,OAAO,CAACxC,UAApC,EAAgD4C,QAAhD,CAAN;AACA,kBAAM,MAAI,CAACnC,gBAAL,CAAsBmB,OAAO,CAACd,eAA9B,EAA+Cc,OAAO,CAACf,YAAvD,EAAqE2B,OAAO,CAACK,SAA7E,CAAN;AACA,gBAAIC,UAAU,GAAG;AAAEC,cAAAA,KAAK,EAAEnB,OAAO,CAACoB;AAAjB,aAAjB;AACAF,YAAAA,UAAU,CAACR,SAAX,GAAuBV,OAAO,CAACf,YAA/B;AACAiC,YAAAA,UAAU,CAACC,KAAX,GAAmBnB,OAAO,CAACoB,WAA3B;AACAF,YAAAA,UAAU,CAACG,qBAAX,GAAmCpB,cAAc,CAACrC,EAAlD;AACAsD,YAAAA,UAAU,CAACI,YAAX,GAA0BN,QAA1B;AACAE,YAAAA,UAAU,CAACK,WAAX,GAAyBR,QAAzB;;AACA,YAAA,MAAI,CAAChD,KAAL,CAAWwC,QAAX,CAAoBtC,GAApB,CAAwBiD,UAAxB;AACH;AACJ,SAjCD;;AAAA;AAAA;AAAA;AAAA;AAD4B;AAmC/B;;AAnFyB;;AAqF9BpF,gBAAgB,CAAC0F,IAAjB,GAAwB,SAASC,wBAAT,CAAkC/B,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAI5D,gBAAV,EAA4BH,EAAE,CAAC+F,QAAH,CAAY,UAAZ,CAA5B,EAAqD/F,EAAE,CAAC+F,QAAH,CAAY9F,EAAE,CAAC+F,cAAf,CAArD,EAAqFhG,EAAE,CAAC+F,QAAH,CAAY7F,EAAE,CAACK,cAAf,CAArF,CAAP;AAA8H,CAA7L;;AACAJ,gBAAgB,CAAC8F,KAAjB,GAAyB,aAAcjG,EAAE,CAACkG,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEhG,gBAAT;AAA2BiG,EAAAA,OAAO,EAAEjG,gBAAgB,CAAC0F,IAArD;AAA2DQ,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC","sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./message.service\";\r\nimport * as i2 from \"./rsa.keys.service\";\r\nexport class WebSocketService {\r\n    constructor(baseUrl, messageService, RSAKeysService) {\r\n        this.baseUrl = baseUrl + \"schatHub\";\r\n        this.RSAKeysService = RSAKeysService;\r\n        this.messageService = messageService;\r\n        this.HubConnection = new HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(\"http://localhost:5172/schatHub\")\r\n            .build();\r\n        this.HubConnection.start();\r\n        this.initWebSocket();\r\n    }\r\n    async initWebSocket() {\r\n        await this.HubConnection.on(\"Test\", message => { console.log(message); });\r\n        await this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => { this.RSAKeysService.AddNewRSAKeysServer(rsaKeys); });\r\n        await this.HubConnection.on(\"AddNewMessages\", messages => { this.messageService.AddNewMessages(messages); });\r\n    }\r\n    async sendMessage(message) {\r\n        await this.HubConnection.send(\"SendMessage\", message);\r\n    }\r\n    async SendPublicRSAKey(rsaKey) {\r\n        await this.HubConnection.send(\"SendRSAKeys\", rsaKey);\r\n    }\r\n    async AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\r\n        let pubKey = { id: idKey, n: key.n, e: key.e };\r\n        if (isRecipientKey) {\r\n            this.appDB.PublicKeyForEncript.add(pubKey);\r\n        }\r\n        else {\r\n            this.appDB.PublicKey.add(pubKey);\r\n        }\r\n    }\r\n    async AddPrivateKeyToLocalDB(privateKey, idKey) {\r\n        let prKey = {\r\n            id: idKey, n: privateKey.n, e: privateKey.e,\r\n            d: privateKey.d, p: privateKey.p, q: privateKey.q,\r\n            dP: privateKey.dP, dQ: privateKey.dQ, qInv: privateKey.qInv\r\n        };\r\n        await this.appDB.PrivateKey.add(prKey);\r\n    }\r\n    async SendRSAPublicKey(senderid, recipientId, pubKey) {\r\n        let sendedRsa = {\r\n            senderUserId: senderid,\r\n            recipientUserId: recipientId, nDataJson: JSON.stringify(pubKey.n.data),\r\n            ns: pubKey.n.s, nt: pubKey.n.t, eDataJson: JSON.stringify(pubKey.e.data), es: pubKey.e.s, et: pubKey.e.t\r\n        };\r\n        await this.WebSocketService.SendPublicRSAKey(sendedRsa);\r\n    }\r\n    async AddNewRSAKeysServer(keys) {\r\n        keys.forEach(async (element) => {\r\n            // parsing data\r\n            let insertedPubKey = { id: uuidv4() };\r\n            // parse n data\r\n            let n = new forge.jsbn.BigInteger(null);\r\n            n.s = element.ns;\r\n            n.t = element.nt;\r\n            n.data = JSON.parse(element.nDataJson);\r\n            // parse e data\r\n            let e = new forge.jsbn.BigInteger(null);\r\n            e.s = element.es;\r\n            e.t = element.et;\r\n            e.data = JSON.parse(element.eDataJson);\r\n            insertedPubKey.e = e;\r\n            insertedPubKey.n = n;\r\n            // add to db\r\n            this.appDB.PublicKeyForEncript.add(insertedPubKey);\r\n            let isContaints = await this.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count() == 0;\r\n            if (isContaints) {\r\n                var keyPair = await this.rsaService.GenerateKeyPair();\r\n                let pubKeyId = uuidv4();\r\n                let prtKeyId = uuidv4();\r\n                await this.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\r\n                await this.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\r\n                await this.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\r\n                let newContact = { Login: element.senderLogin };\r\n                newContact.ContactId = element.senderUserId;\r\n                newContact.Login = element.senderLogin;\r\n                newContact.PublicKeyForEncriptId = insertedPubKey.id;\r\n                newContact.PrivateKeyId = prtKeyId;\r\n                newContact.PublicKeyId = pubKeyId;\r\n                this.appDB.Contacts.add(newContact);\r\n            }\r\n        });\r\n    }\r\n}\r\nWebSocketService.ɵfac = function WebSocketService_Factory(t) { return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.RSAKeysService)); };\r\nWebSocketService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WebSocketService, factory: WebSocketService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}