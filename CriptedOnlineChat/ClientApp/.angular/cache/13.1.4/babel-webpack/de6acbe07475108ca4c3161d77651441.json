{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nconst message = \"message\";\nexport class RSAService {\n  constructor() {}\n\n  GenerateKeyPairs() {\n    return _asyncToGenerator(function* () {\n      let keysPairUser1 = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      let keysPairUser2 = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      console.log(\"user 1 keys: \" + keysPairUser1 + \", user 2 keys: \" + keysPairUser2);\n      yield forge.pki.rsa.setPrivateKey(keysPairUser1.privateKey.n, keysPairUser1.privateKey.e, keysPairUser1.privateKey.d, keysPairUser1.privateKey.p, keysPairUser1.privateKey.q, keysPairUser1.privateKey.dP, keysPairUser1.privateKey.dQ, keysPairUser1.privateKey.qInv);\n      yield forge.pki.rsa.setPublicKey(keysPairUser1.publicKey.n, keysPairUser1.publicKey.e);\n      console.log(\"Зашифрованное сообщение: \" + keysPairUser1.privateKey.decrypt(forge.util.encodeUtf8(), message));\n      console.log(\"Расшифрованное сообщение: \" + keysPairUser1.publicKey.encrypt(keysPairUser1.privateKey.decrypt(message)));\n      return new KeyPairs(\"ad\", \"asd\");\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\n\nclass KeyPairs {\n  constructor(publicKey, privateKey) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","message","RSAService","constructor","GenerateKeyPairs","keysPairUser1","pki","rsa","generateKeyPair","bits","e","keysPairUser2","console","log","setPrivateKey","privateKey","n","d","p","q","dP","dQ","qInv","setPublicKey","publicKey","decrypt","util","encodeUtf8","encrypt","KeyPairs","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;AACrB,UAAIC,aAAa,SAASN,KAAK,CAACO,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAA1B;AACA,UAAIC,aAAa,SAASZ,KAAK,CAACO,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAA1B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBR,aAAlB,GAAkC,iBAAlC,GAAsDM,aAAlE;AACA,YAAMZ,KAAK,CAACO,GAAN,CAAUC,GAAV,CAAcO,aAAd,CAA4BT,aAAa,CAACU,UAAd,CAAyBC,CAArD,EAAwDX,aAAa,CAACU,UAAd,CAAyBL,CAAjF,EAAoFL,aAAa,CAACU,UAAd,CAAyBE,CAA7G,EAAgHZ,aAAa,CAACU,UAAd,CAAyBG,CAAzI,EAA4Ib,aAAa,CAACU,UAAd,CAAyBI,CAArK,EAAwKd,aAAa,CAACU,UAAd,CAAyBK,EAAjM,EAAqMf,aAAa,CAACU,UAAd,CAAyBM,EAA9N,EAAkOhB,aAAa,CAACU,UAAd,CAAyBO,IAA3P,CAAN;AACA,YAAMvB,KAAK,CAACO,GAAN,CAAUC,GAAV,CAAcgB,YAAd,CAA2BlB,aAAa,CAACmB,SAAd,CAAwBR,CAAnD,EAAsDX,aAAa,CAACmB,SAAd,CAAwBd,CAA9E,CAAN;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BR,aAAa,CAACU,UAAd,CAAyBU,OAAzB,CAAiC1B,KAAK,CAAC2B,IAAN,CAAWC,UAAX,EAAjC,EAA0D1B,OAA1D,CAA1C;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BR,aAAa,CAACmB,SAAd,CAAwBI,OAAxB,CAAgCvB,aAAa,CAACU,UAAd,CAAyBU,OAAzB,CAAiCxB,OAAjC,CAAhC,CAA3C;AACA,aAAO,IAAI4B,QAAJ,CAAa,IAAb,EAAmB,KAAnB,CAAP;AARqB;AASxB;;AAZmB;;AAcxB3B,UAAU,CAAC4B,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAI9B,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAAC+B,KAAX,GAAmB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,UAAT;AAAqBkC,EAAAA,OAAO,EAAElC,UAAU,CAAC4B,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC;;AACA,MAAMR,QAAN,CAAe;AACX1B,EAAAA,WAAW,CAACqB,SAAD,EAAYT,UAAZ,EAAwB;AAC/B,SAAKS,SAAL,GAAiBA,SAAjB;AACA,SAAKT,UAAL,GAAkBA,UAAlB;AACH;;AAJU","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nconst message = \"message\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async GenerateKeyPairs() {\r\n        let keysPairUser1 = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        let keysPairUser2 = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        console.log(\"user 1 keys: \" + keysPairUser1 + \", user 2 keys: \" + keysPairUser2);\r\n        await forge.pki.rsa.setPrivateKey(keysPairUser1.privateKey.n, keysPairUser1.privateKey.e, keysPairUser1.privateKey.d, keysPairUser1.privateKey.p, keysPairUser1.privateKey.q, keysPairUser1.privateKey.dP, keysPairUser1.privateKey.dQ, keysPairUser1.privateKey.qInv);\r\n        await forge.pki.rsa.setPublicKey(keysPairUser1.publicKey.n, keysPairUser1.publicKey.e);\r\n        console.log(\"Зашифрованное сообщение: \" + keysPairUser1.privateKey.decrypt(forge.util.encodeUtf8(), message));\r\n        console.log(\"Расшифрованное сообщение: \" + keysPairUser1.publicKey.encrypt(keysPairUser1.privateKey.decrypt(message)));\r\n        return new KeyPairs(\"ad\", \"asd\");\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nclass KeyPairs {\r\n    constructor(publicKey, privateKey) {\r\n        this.publicKey = publicKey;\r\n        this.privateKey = privateKey;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}