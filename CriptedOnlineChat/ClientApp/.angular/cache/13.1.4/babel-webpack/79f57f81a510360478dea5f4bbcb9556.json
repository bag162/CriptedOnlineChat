{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as forge from 'node-forge';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/db\";\nexport class WebSocketService {\n  constructor(baseUrl, appDB) {\n    this.baseUrl = baseUrl + \"schatHub\";\n    this.appDB = appDB;\n    this.HubConnection = new HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(\"http://localhost:5172/schatHub\").build();\n    this.HubConnection.start();\n    this.initWebSocket();\n  }\n\n  initWebSocket() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.HubConnection.on(\"Test\", message => {\n        console.log(message);\n      });\n      yield _this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => {\n        _this.AddNewRSAKeysServer(rsaKeys);\n      });\n    })();\n  }\n\n  sendMessage(message, recipientLogin) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.HubConnection.send(\"SendMessage\", message, recipientLogin);\n    })();\n  }\n\n  SendPublicRSAKey(rsaKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.HubConnection.send(\"SendRSAKeys\", rsaKey);\n    })();\n  }\n\n  AddNewRSAKeysServer(keys) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      keys.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          let insertedPubKey = {\n            id: uuidv4()\n          };\n          let n = new forge.jsbn.BigInteger(null);\n          n.s = element.ns;\n          n.t = element.nt;\n          n.data = JSON.parse(element.nDataJson);\n          let e = new forge.jsbn.BigInteger(null);\n          n.s = element.es;\n          n.t = element.et;\n          n.data = JSON.parse(element.eDataJson);\n          insertedPubKey.e = e;\n          insertedPubKey.n = n;\n\n          if ((yield _this4.appDB.Contacts.filter(x => x.id == element.SenderUserId).count()) == 0) {\n            let newContact = {\n              id: element.SenderUserId,\n              Login: element.SenderLogin\n            };\n            newContact.id = element.SenderUserId;\n            newContact.Login = element.SenderLogin;\n            console.log();\n            yield _this4.appDB.Contacts.add(newContact);\n          }\n\n          yield _this4.appDB.PublicKeyForEncript.add(insertedPubKey);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i1.AppDB));\n};\n\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/WebSocket.service.ts"],"names":["signalR","HubConnectionBuilder","forge","v4","uuidv4","i0","i1","WebSocketService","constructor","baseUrl","appDB","HubConnection","configureLogging","LogLevel","Debug","withUrl","build","start","initWebSocket","on","message","console","log","rsaKeys","AddNewRSAKeysServer","sendMessage","recipientLogin","send","SendPublicRSAKey","rsaKey","keys","forEach","element","insertedPubKey","id","n","jsbn","BigInteger","s","ns","t","nt","data","JSON","parse","nDataJson","e","es","et","eDataJson","Contacts","filter","x","SenderUserId","count","newContact","Login","SenderLogin","add","PublicKeyForEncript","ɵfac","WebSocketService_Factory","ɵɵinject","AppDB","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport * as forge from 'node-forge';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/db\";\r\nexport class WebSocketService {\r\n    constructor(baseUrl, appDB) {\r\n        this.baseUrl = baseUrl + \"schatHub\";\r\n        this.appDB = appDB;\r\n        this.HubConnection = new HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(\"http://localhost:5172/schatHub\")\r\n            .build();\r\n        this.HubConnection.start();\r\n        this.initWebSocket();\r\n    }\r\n    async initWebSocket() {\r\n        await this.HubConnection.on(\"Test\", message => { console.log(message); });\r\n        await this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => { this.AddNewRSAKeysServer(rsaKeys); });\r\n    }\r\n    async sendMessage(message, recipientLogin) {\r\n        await this.HubConnection.send(\"SendMessage\", message, recipientLogin);\r\n    }\r\n    async SendPublicRSAKey(rsaKey) {\r\n        await this.HubConnection.send(\"SendRSAKeys\", rsaKey);\r\n    }\r\n    async AddNewRSAKeysServer(keys) {\r\n        keys.forEach(async (element) => {\r\n            let insertedPubKey = { id: uuidv4() };\r\n            let n = new forge.jsbn.BigInteger(null);\r\n            n.s = element.ns;\r\n            n.t = element.nt;\r\n            n.data = JSON.parse(element.nDataJson);\r\n            let e = new forge.jsbn.BigInteger(null);\r\n            n.s = element.es;\r\n            n.t = element.et;\r\n            n.data = JSON.parse(element.eDataJson);\r\n            insertedPubKey.e = e;\r\n            insertedPubKey.n = n;\r\n            if (await this.appDB.Contacts.filter(x => x.id == element.SenderUserId).count() == 0) {\r\n                let newContact = { id: element.SenderUserId, Login: element.SenderLogin };\r\n                newContact.id = element.SenderUserId;\r\n                newContact.Login = element.SenderLogin;\r\n                console.log();\r\n                await this.appDB.Contacts.add(newContact);\r\n            }\r\n            await this.appDB.PublicKeyForEncript.add(insertedPubKey);\r\n        });\r\n    }\r\n}\r\nWebSocketService.ɵfac = function WebSocketService_Factory(t) { return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i1.AppDB)); };\r\nWebSocketService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WebSocketService, factory: WebSocketService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}