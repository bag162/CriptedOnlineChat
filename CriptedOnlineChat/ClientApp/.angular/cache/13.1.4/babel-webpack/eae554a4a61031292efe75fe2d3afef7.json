{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./WebSocket.service\";\nexport class RSAService {\n  constructor(WebSocketService) {\n    this.WebSocketService = WebSocketService;\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001,\n        workers: 2\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var newPubKey = validKeyPair.publicKey;\n      newPubKey.e.data = publicKey.e.data;\n      newPubKey.e.s = publicKey.e.s;\n      newPubKey.e.t = publicKey.e.t;\n      newPubKey.n.data = publicKey.n.data;\n      newPubKey.n.s = publicKey.n.s;\n      newPubKey.n.t = publicKey.n.t;\n      return yield newPubKey.encrypt(forge.util.encodeUtf8(message));\n      ;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    return _asyncToGenerator(function* () {\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var newPrKey = validKeyPair.privateKey;\n      newPrKey.d = privateKey.d;\n      newPrKey.dP = privateKey.dP;\n      newPrKey.dQ = privateKey.dQ;\n      newPrKey.e = privateKey.e;\n      newPrKey.n = privateKey.n;\n      newPrKey.p = privateKey.p;\n      newPrKey.q = privateKey.q;\n      newPrKey.qInv = privateKey.qInv;\n      return forge.util.decodeUtf8(yield newPrKey.decrypt(message));\n    })();\n  }\n\n  SendRSAPublicKey(rsaKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.WebSocketService.SendPublicRSAKey(rsaKey);\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)(i0.ɵɵinject(i1.WebSocketService));\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\nexport class SendRSAPublicKeyDTO {\n  constructor() {\n    this.senderLogin = \"\";\n    this.senderUserId = \"\";\n    this.recipientUserId = \"\";\n    this.nt = 0;\n    this.ns = 0;\n    this.et = 0;\n    this.es = 0;\n    this.nDataJson = \"\";\n    this.eDataJson = \"\";\n  }\n\n}\n\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) {\n  return new (t || SendRSAPublicKeyDTO)();\n};\n\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SendRSAPublicKeyDTO,\n  factory: SendRSAPublicKeyDTO.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.service.ts"],"names":["forge","i0","i1","RSAService","constructor","WebSocketService","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","workers","EncriptMessage","message","publicKey","validKeyPair","newPubKey","data","s","t","n","encrypt","util","encodeUtf8","DecriptMessage","privateKey","newPrKey","d","dP","dQ","p","q","qInv","decodeUtf8","decrypt","SendRSAPublicKey","rsaKey","SendPublicRSAKey","ɵfac","RSAService_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","SendRSAPublicKeyDTO","senderLogin","senderUserId","recipientUserId","nt","ns","et","es","nDataJson","eDataJson","SendRSAPublicKeyDTO_Factory"],"mappings":"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","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./WebSocket.service\";\r\nexport class RSAService {\r\n    constructor(WebSocketService) {\r\n        this.WebSocketService = WebSocketService;\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001, workers: 2 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var newPubKey = validKeyPair.publicKey;\r\n        newPubKey.e.data = publicKey.e.data;\r\n        newPubKey.e.s = publicKey.e.s;\r\n        newPubKey.e.t = publicKey.e.t;\r\n        newPubKey.n.data = publicKey.n.data;\r\n        newPubKey.n.s = publicKey.n.s;\r\n        newPubKey.n.t = publicKey.n.t;\r\n        return await newPubKey.encrypt(forge.util.encodeUtf8(message));\r\n        ;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var newPrKey = validKeyPair.privateKey;\r\n        newPrKey.d = privateKey.d;\r\n        newPrKey.dP = privateKey.dP;\r\n        newPrKey.dQ = privateKey.dQ;\r\n        newPrKey.e = privateKey.e;\r\n        newPrKey.n = privateKey.n;\r\n        newPrKey.p = privateKey.p;\r\n        newPrKey.q = privateKey.q;\r\n        newPrKey.qInv = privateKey.qInv;\r\n        return forge.util.decodeUtf8(await newPrKey.decrypt(message));\r\n    }\r\n    async SendRSAPublicKey(rsaKey) {\r\n        await this.WebSocketService.SendPublicRSAKey(rsaKey);\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(i0.ɵɵinject(i1.WebSocketService)); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nexport class SendRSAPublicKeyDTO {\r\n    constructor() {\r\n        this.senderLogin = \"\";\r\n        this.senderUserId = \"\";\r\n        this.recipientUserId = \"\";\r\n        this.nt = 0;\r\n        this.ns = 0;\r\n        this.et = 0;\r\n        this.es = 0;\r\n        this.nDataJson = \"\";\r\n        this.eDataJson = \"\";\r\n    }\r\n}\r\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) { return new (t || SendRSAPublicKeyDTO)(); };\r\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SendRSAPublicKeyDTO, factory: SendRSAPublicKeyDTO.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}