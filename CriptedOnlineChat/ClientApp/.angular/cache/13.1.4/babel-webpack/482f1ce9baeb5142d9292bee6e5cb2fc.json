{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport * as forge from 'node-forge';\nlet RSAService = class RSAService {\n  constructor(WebSocketService) {\n    this.WebSocketService = WebSocketService;\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001,\n        workers: 2\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var newPubKey = validKeyPair.publicKey;\n      newPubKey.e.data = publicKey.e.data;\n      newPubKey.e.s = publicKey.e.s;\n      newPubKey.e.t = publicKey.e.t;\n      newPubKey.n.data = publicKey.n.data;\n      newPubKey.n.s = publicKey.n.s;\n      newPubKey.n.t = publicKey.n.t;\n      return yield newPubKey.encrypt(forge.util.encodeUtf8(message));\n      ;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    return _asyncToGenerator(function* () {\n      console.log(true);\n      var validKeyPair = forge.pki.rsa.generateKeyPair();\n      var newPrKey = validKeyPair.privateKey;\n      newPrKey.d.data = privateKey.d.data;\n      newPrKey.d.s = privateKey.d.s;\n      newPrKey.d.t = privateKey.d.t;\n      newPrKey.dP.data = privateKey.dP.data;\n      newPrKey.dP.s = privateKey.dP.s;\n      newPrKey.dP.t = privateKey.dP.t;\n      newPrKey.dQ.data = privateKey.dQ.data;\n      newPrKey.dQ.s = privateKey.dQ.s;\n      newPrKey.dQ.t = privateKey.dQ.t;\n      newPrKey.e.data = privateKey.e.data;\n      newPrKey.e.s = privateKey.e.s;\n      newPrKey.e.t = privateKey.e.t;\n      newPrKey.n.data = privateKey.n.data;\n      newPrKey.n.s = privateKey.n.s;\n      newPrKey.n.t = privateKey.n.t;\n      newPrKey.p.data = privateKey.p.data;\n      newPrKey.p.s = privateKey.p.s;\n      newPrKey.p.t = privateKey.p.t;\n      newPrKey.q.data = privateKey.q.data;\n      newPrKey.q.s = privateKey.q.s;\n      newPrKey.q.t = privateKey.q.t;\n      newPrKey.qInv.data = privateKey.qInv.data;\n      newPrKey.qInv.s = privateKey.qInv.s;\n      newPrKey.qInv.t = privateKey.qInv.t;\n      console.log(forge.util.decodeUtf8(yield newPrKey.decrypt(message)));\n      return forge.util.decodeUtf8(yield newPrKey.decrypt(message));\n    })();\n  }\n\n};\nRSAService = __decorate([Injectable({\n  providedIn: 'root'\n})], RSAService);\nexport { RSAService };","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.service.ts"],"names":["__decorate","Injectable","forge","RSAService","constructor","WebSocketService","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","workers","EncriptMessage","message","publicKey","validKeyPair","newPubKey","data","s","t","n","encrypt","util","encodeUtf8","DecriptMessage","privateKey","console","log","newPrKey","d","dP","dQ","p","q","qInv","decodeUtf8","decrypt","providedIn"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport * as forge from 'node-forge';\r\nlet RSAService = class RSAService {\r\n    constructor(WebSocketService) {\r\n        this.WebSocketService = WebSocketService;\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001, workers: 2 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var newPubKey = validKeyPair.publicKey;\r\n        newPubKey.e.data = publicKey.e.data;\r\n        newPubKey.e.s = publicKey.e.s;\r\n        newPubKey.e.t = publicKey.e.t;\r\n        newPubKey.n.data = publicKey.n.data;\r\n        newPubKey.n.s = publicKey.n.s;\r\n        newPubKey.n.t = publicKey.n.t;\r\n        return await newPubKey.encrypt(forge.util.encodeUtf8(message));\r\n        ;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        console.log(true);\r\n        var validKeyPair = forge.pki.rsa.generateKeyPair();\r\n        var newPrKey = validKeyPair.privateKey;\r\n        newPrKey.d.data = privateKey.d.data;\r\n        newPrKey.d.s = privateKey.d.s;\r\n        newPrKey.d.t = privateKey.d.t;\r\n        newPrKey.dP.data = privateKey.dP.data;\r\n        newPrKey.dP.s = privateKey.dP.s;\r\n        newPrKey.dP.t = privateKey.dP.t;\r\n        newPrKey.dQ.data = privateKey.dQ.data;\r\n        newPrKey.dQ.s = privateKey.dQ.s;\r\n        newPrKey.dQ.t = privateKey.dQ.t;\r\n        newPrKey.e.data = privateKey.e.data;\r\n        newPrKey.e.s = privateKey.e.s;\r\n        newPrKey.e.t = privateKey.e.t;\r\n        newPrKey.n.data = privateKey.n.data;\r\n        newPrKey.n.s = privateKey.n.s;\r\n        newPrKey.n.t = privateKey.n.t;\r\n        newPrKey.p.data = privateKey.p.data;\r\n        newPrKey.p.s = privateKey.p.s;\r\n        newPrKey.p.t = privateKey.p.t;\r\n        newPrKey.q.data = privateKey.q.data;\r\n        newPrKey.q.s = privateKey.q.s;\r\n        newPrKey.q.t = privateKey.q.t;\r\n        newPrKey.qInv.data = privateKey.qInv.data;\r\n        newPrKey.qInv.s = privateKey.qInv.s;\r\n        newPrKey.qInv.t = privateKey.qInv.t;\r\n        console.log(forge.util.decodeUtf8(await newPrKey.decrypt(message)));\r\n        return forge.util.decodeUtf8(await newPrKey.decrypt(message));\r\n    }\r\n};\r\nRSAService = __decorate([\r\n    Injectable({ providedIn: 'root' })\r\n], RSAService);\r\nexport { RSAService };\r\n"]},"metadata":{},"sourceType":"module"}