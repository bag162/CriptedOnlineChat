{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor() {}\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001,\n        workers: 2\n      });\n      forge;\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      return yield publicKey.encrypt(forge.util.encodeUtf8(message));\n      ;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    return _asyncToGenerator(function* () {\n      return forge.util.decodeUtf8(yield privateKey.decrypt(message));\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.ts"],"names":["forge","i0","RSAService","constructor","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","workers","EncriptMessage","message","publicKey","encrypt","util","encodeUtf8","DecriptMessage","privateKey","decodeUtf8","decrypt","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIC,OAAO,SAASL,KAAK,CAACM,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE,OAAjB;AAA0BC,QAAAA,OAAO,EAAE;AAAnC,OAA9B,CAApB;AACAX,MAAAA,KAAK;AACL,aAAOK,OAAP;AAHoB;AAIvB;;AACKO,EAAAA,cAAc,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAAA;AACrC,mBAAaA,SAAS,CAACC,OAAV,CAAkBf,KAAK,CAACgB,IAAN,CAAWC,UAAX,CAAsBJ,OAAtB,CAAlB,CAAb;AACA;AAFqC;AAGxC;;AACKK,EAAAA,cAAc,CAACL,OAAD,EAAUM,UAAV,EAAsB;AAAA;AACtC,aAAOnB,KAAK,CAACgB,IAAN,CAAWI,UAAX,OAA4BD,UAAU,CAACE,OAAX,CAAmBR,OAAnB,CAA5B,CAAP;AADsC;AAEzC;;AAdmB;;AAgBxBX,UAAU,CAACoB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAItB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACuB,KAAX,GAAmB,aAAcxB,EAAE,CAACyB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,UAAT;AAAqB0B,EAAAA,OAAO,EAAE1B,UAAU,CAACoB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001, workers: 2 });\r\n        forge;\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        return await publicKey.encrypt(forge.util.encodeUtf8(message));\r\n        ;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        return forge.util.decodeUtf8(await privateKey.decrypt(message));\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}