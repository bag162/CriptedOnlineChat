{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport * as forge from 'node-forge';\nlet MessageListComponent = class MessageListComponent {\n  constructor(db, dataService, webSocketService, rsaService) {\n    // variables to display\n    this.messageList = [];\n    this.user = {\n      Login: \"\"\n    };\n    this.isKeyExchangeCompleted = false; // variables to html\n\n    this.sendedMessage = \"\";\n    this.dispayedMessagesLogin = \"\";\n    this.DataService = dataService;\n    this.db = db;\n    this.WebSocketService = webSocketService;\n    this.rsaService = rsaService;\n  }\n\n  ngDoCheck() {\n    if (this.isKeyExchangeCompleted) {\n      $(\".messageClass\").hide();\n    } else {\n      $(\".messageClass\").show();\n    }\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.DataService.currentDisplayedLogin.subscribe(currentDisplayedLogin => {\n        _this.DisplayMissages(currentDisplayedLogin);\n\n        _this.dispayedMessagesLogin = currentDisplayedLogin;\n        $('.recipientName').text(currentDisplayedLogin);\n      });\n      yield _this.db.User.toArray().then(x => _this.user = x[0]);\n      $(\".NoKeyMessage\").hide();\n      $(\".MessageClass\").hide();\n    })();\n  }\n\n  DisplayMissages(dispayedMessagesLogin) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Проверяем, есть ли у отображаемого контакта ключ для шифровки сообщения, если нет, то скрываем компонент отправки сообщения, и отображаем контейнер информирования\n      var displayedContact = yield _this2.db.Contacts.filter(x => x.Login == dispayedMessagesLogin).first();\n\n      if (displayedContact.PublicKeyForEncriptId == undefined) {\n        $(\".NoKeyMessage\").show();\n        $(\".MessageClass\").hide();\n      } else {\n        $(\".NoKeyMessage\").hide();\n        $(\".MessageClass\").show();\n      } // выгрузка сообщений из localdb и отображение их\n\n\n      _this2.messageList = [];\n      var messagesToDisplay = yield _this2.db.Messages.filter(x => x.RecipientLogin == dispayedMessagesLogin).toArray();\n      messagesToDisplay.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          let decriptedNewMessage = {\n            Data: element.Data,\n            IsSender: element.IsSender,\n            RecipientLogin: element.RecipientLogin\n          };\n\n          _this2.messageList.push(decriptedNewMessage);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()); // скол до новых сообщений\n\n      setTimeout(() => {\n        var block = document.getElementById(\"scrollChat\");\n        block.scrollTop = 9999;\n      }, 0);\n    })();\n  }\n\n  SendMessage() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.sendedMessage == \"\") {\n        return;\n      }\n\n      let contactForSend = yield _this3.db.Contacts.filter(x => x.Login == _this3.dispayedMessagesLogin).first();\n      let key = yield _this3.db.PublicKeyForEncript.filter(x => x.id == contactForSend.PublicKeyForEncriptId).first();\n      var keyForEncript = forge.pki.rsa.setPublicKey(key.n, key.e);\n      let encriptedMessage = yield _this3.rsaService.EncriptMessage(_this3.sendedMessage, keyForEncript);\n      let message = {\n        data: encriptedMessage,\n        senderId: _this3.user.id,\n        recipientId: contactForSend.ContactId\n      };\n      yield _this3.WebSocketService.sendMessage(message);\n      let addedMessage = {\n        Data: _this3.sendedMessage,\n        RecipientLogin: contactForSend.Login,\n        IsSender: true\n      };\n      yield _this3.db.Messages.add(addedMessage);\n      _this3.messageList = [];\n      _this3.sendedMessage = \"\";\n      yield _this3.DisplayMissages(contactForSend.Login);\n    })();\n  }\n\n};\n\n__decorate([Input()], MessageListComponent.prototype, \"displayedUserLogin\", void 0);\n\nMessageListComponent = __decorate([Component({\n  selector: 'message-list-component',\n  templateUrl: './message.list.component.html',\n  styleUrls: ['./message.list.component.css']\n})], MessageListComponent);\nexport { MessageListComponent };","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/HomeComponent/MessageListComponent/Message.list.component.ts"],"names":["__decorate","Component","Input","forge","MessageListComponent","constructor","db","dataService","webSocketService","rsaService","messageList","user","Login","isKeyExchangeCompleted","sendedMessage","dispayedMessagesLogin","DataService","WebSocketService","ngDoCheck","$","hide","show","ngOnInit","currentDisplayedLogin","subscribe","DisplayMissages","text","User","toArray","then","x","displayedContact","Contacts","filter","first","PublicKeyForEncriptId","undefined","messagesToDisplay","Messages","RecipientLogin","forEach","element","decriptedNewMessage","Data","IsSender","push","setTimeout","block","document","getElementById","scrollTop","SendMessage","contactForSend","key","PublicKeyForEncript","id","keyForEncript","pki","rsa","setPublicKey","n","e","encriptedMessage","EncriptMessage","message","data","senderId","recipientId","ContactId","sendMessage","addedMessage","add","prototype","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,eAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,IAAIC,oBAAoB,GAAG,MAAMA,oBAAN,CAA2B;AAClDC,EAAAA,WAAW,CAACC,EAAD,EAAKC,WAAL,EAAkBC,gBAAlB,EAAoCC,UAApC,EAAgD;AACvD;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,IAAL,GAAY;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAZ;AACA,SAAKC,sBAAL,GAA8B,KAA9B,CAJuD,CAKvD;;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,WAAL,GAAmBT,WAAnB;AACA,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKW,gBAAL,GAAwBT,gBAAxB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACDS,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKL,sBAAT,EAAiC;AAC7BM,MAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,IAAnB;AACH,KAFD,MAGK;AACDD,MAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBE,IAAnB;AACH;AACJ;;AACKC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,YAAM,KAAI,CAACN,WAAL,CAAiBO,qBAAjB,CAAuCC,SAAvC,CAAkDD,qBAAD,IAA2B;AAC9E,QAAA,KAAI,CAACE,eAAL,CAAqBF,qBAArB;;AACA,QAAA,KAAI,CAACR,qBAAL,GAA6BQ,qBAA7B;AACAJ,QAAAA,CAAC,CAAC,gBAAD,CAAD,CAAoBO,IAApB,CAAyBH,qBAAzB;AACH,OAJK,CAAN;AAKA,YAAM,KAAI,CAACjB,EAAL,CAAQqB,IAAR,CAAaC,OAAb,GAAuBC,IAAvB,CAA4BC,CAAC,IAAI,KAAI,CAACnB,IAAL,GAAYmB,CAAC,CAAC,CAAD,CAA9C,CAAN;AACAX,MAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,IAAnB;AACAD,MAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,IAAnB;AARa;AAShB;;AACKK,EAAAA,eAAe,CAACV,qBAAD,EAAwB;AAAA;;AAAA;AACzC;AACA,UAAIgB,gBAAgB,SAAS,MAAI,CAACzB,EAAL,CAAQ0B,QAAR,CAAiBC,MAAjB,CAAwBH,CAAC,IAAIA,CAAC,CAAClB,KAAF,IAAWG,qBAAxC,EAA+DmB,KAA/D,EAA7B;;AACA,UAAIH,gBAAgB,CAACI,qBAAjB,IAA0CC,SAA9C,EAAyD;AACrDjB,QAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBE,IAAnB;AACAF,QAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,IAAnB;AACH,OAHD,MAIK;AACDD,QAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,IAAnB;AACAD,QAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBE,IAAnB;AACH,OAVwC,CAWzC;;;AACA,MAAA,MAAI,CAACX,WAAL,GAAmB,EAAnB;AACA,UAAI2B,iBAAiB,SAAS,MAAI,CAAC/B,EAAL,CAAQgC,QAAR,CAAiBL,MAAjB,CAAwBH,CAAC,IAAIA,CAAC,CAACS,cAAF,IAAoBxB,qBAAjD,EAAwEa,OAAxE,EAA9B;AACAS,MAAAA,iBAAiB,CAACG,OAAlB;AAAA,qCAA0B,WAAOC,OAAP,EAAmB;AACzC,cAAIC,mBAAmB,GAAG;AAAEC,YAAAA,IAAI,EAAEF,OAAO,CAACE,IAAhB;AAAsBC,YAAAA,QAAQ,EAAEH,OAAO,CAACG,QAAxC;AAAkDL,YAAAA,cAAc,EAAEE,OAAO,CAACF;AAA1E,WAA1B;;AACA,UAAA,MAAI,CAAC7B,WAAL,CAAiBmC,IAAjB,CAAsBH,mBAAtB;AACH,SAHD;;AAAA;AAAA;AAAA;AAAA,WAdyC,CAkBzC;;AACAI,MAAAA,UAAU,CAAC,MAAM;AACb,YAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAZ;AACAF,QAAAA,KAAK,CAACG,SAAN,GAAkB,IAAlB;AACH,OAHS,EAGP,CAHO,CAAV;AAnByC;AAuB5C;;AACKC,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,UAAI,MAAI,CAACrC,aAAL,IAAsB,EAA1B,EAA8B;AAC1B;AACH;;AACD,UAAIsC,cAAc,SAAS,MAAI,CAAC9C,EAAL,CAAQ0B,QAAR,CAAiBC,MAAjB,CAAwBH,CAAC,IAAIA,CAAC,CAAClB,KAAF,IAAW,MAAI,CAACG,qBAA7C,EAAoEmB,KAApE,EAA3B;AACA,UAAImB,GAAG,SAAS,MAAI,CAAC/C,EAAL,CAAQgD,mBAAR,CAA4BrB,MAA5B,CAAmCH,CAAC,IAAIA,CAAC,CAACyB,EAAF,IAAQH,cAAc,CAACjB,qBAA/D,EAAsFD,KAAtF,EAAhB;AACA,UAAIsB,aAAa,GAAGrD,KAAK,CAACsD,GAAN,CAAUC,GAAV,CAAcC,YAAd,CAA2BN,GAAG,CAACO,CAA/B,EAAkCP,GAAG,CAACQ,CAAtC,CAApB;AACA,UAAIC,gBAAgB,SAAS,MAAI,CAACrD,UAAL,CAAgBsD,cAAhB,CAA+B,MAAI,CAACjD,aAApC,EAAmD0C,aAAnD,CAA7B;AACA,UAAIQ,OAAO,GAAG;AACVC,QAAAA,IAAI,EAAEH,gBADI;AACcI,QAAAA,QAAQ,EAAE,MAAI,CAACvD,IAAL,CAAU4C,EADlC;AAEVY,QAAAA,WAAW,EAAEf,cAAc,CAACgB;AAFlB,OAAd;AAIA,YAAM,MAAI,CAACnD,gBAAL,CAAsBoD,WAAtB,CAAkCL,OAAlC,CAAN;AACA,UAAIM,YAAY,GAAG;AAAE3B,QAAAA,IAAI,EAAE,MAAI,CAAC7B,aAAb;AAA4ByB,QAAAA,cAAc,EAAEa,cAAc,CAACxC,KAA3D;AAAkEgC,QAAAA,QAAQ,EAAE;AAA5E,OAAnB;AACA,YAAM,MAAI,CAACtC,EAAL,CAAQgC,QAAR,CAAiBiC,GAAjB,CAAqBD,YAArB,CAAN;AACA,MAAA,MAAI,CAAC5D,WAAL,GAAmB,EAAnB;AACA,MAAA,MAAI,CAACI,aAAL,GAAqB,EAArB;AACA,YAAM,MAAI,CAACW,eAAL,CAAqB2B,cAAc,CAACxC,KAApC,CAAN;AAjBgB;AAkBnB;;AA1EiD,CAAtD;;AA4EAZ,UAAU,CAAC,CACPE,KAAK,EADE,CAAD,EAEPE,oBAAoB,CAACoE,SAFd,EAEyB,oBAFzB,EAE+C,KAAK,CAFpD,CAAV;;AAGApE,oBAAoB,GAAGJ,UAAU,CAAC,CAC9BC,SAAS,CAAC;AACNwE,EAAAA,QAAQ,EAAE,wBADJ;AAENC,EAAAA,WAAW,EAAE,+BAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,8BAAD;AAHL,CAAD,CADqB,CAAD,EAM9BvE,oBAN8B,CAAjC;AAOA,SAASA,oBAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, Input } from '@angular/core';\r\nimport * as forge from 'node-forge';\r\nlet MessageListComponent = class MessageListComponent {\r\n    constructor(db, dataService, webSocketService, rsaService) {\r\n        // variables to display\r\n        this.messageList = [];\r\n        this.user = { Login: \"\" };\r\n        this.isKeyExchangeCompleted = false;\r\n        // variables to html\r\n        this.sendedMessage = \"\";\r\n        this.dispayedMessagesLogin = \"\";\r\n        this.DataService = dataService;\r\n        this.db = db;\r\n        this.WebSocketService = webSocketService;\r\n        this.rsaService = rsaService;\r\n    }\r\n    ngDoCheck() {\r\n        if (this.isKeyExchangeCompleted) {\r\n            $(\".messageClass\").hide();\r\n        }\r\n        else {\r\n            $(\".messageClass\").show();\r\n        }\r\n    }\r\n    async ngOnInit() {\r\n        await this.DataService.currentDisplayedLogin.subscribe((currentDisplayedLogin) => {\r\n            this.DisplayMissages(currentDisplayedLogin);\r\n            this.dispayedMessagesLogin = currentDisplayedLogin;\r\n            $('.recipientName').text(currentDisplayedLogin);\r\n        });\r\n        await this.db.User.toArray().then(x => this.user = x[0]);\r\n        $(\".NoKeyMessage\").hide();\r\n        $(\".MessageClass\").hide();\r\n    }\r\n    async DisplayMissages(dispayedMessagesLogin) {\r\n        // Проверяем, есть ли у отображаемого контакта ключ для шифровки сообщения, если нет, то скрываем компонент отправки сообщения, и отображаем контейнер информирования\r\n        var displayedContact = await this.db.Contacts.filter(x => x.Login == dispayedMessagesLogin).first();\r\n        if (displayedContact.PublicKeyForEncriptId == undefined) {\r\n            $(\".NoKeyMessage\").show();\r\n            $(\".MessageClass\").hide();\r\n        }\r\n        else {\r\n            $(\".NoKeyMessage\").hide();\r\n            $(\".MessageClass\").show();\r\n        }\r\n        // выгрузка сообщений из localdb и отображение их\r\n        this.messageList = [];\r\n        var messagesToDisplay = await this.db.Messages.filter(x => x.RecipientLogin == dispayedMessagesLogin).toArray();\r\n        messagesToDisplay.forEach(async (element) => {\r\n            let decriptedNewMessage = { Data: element.Data, IsSender: element.IsSender, RecipientLogin: element.RecipientLogin };\r\n            this.messageList.push(decriptedNewMessage);\r\n        });\r\n        // скол до новых сообщений\r\n        setTimeout(() => {\r\n            var block = document.getElementById(\"scrollChat\");\r\n            block.scrollTop = 9999;\r\n        }, 0);\r\n    }\r\n    async SendMessage() {\r\n        if (this.sendedMessage == \"\") {\r\n            return;\r\n        }\r\n        let contactForSend = await this.db.Contacts.filter(x => x.Login == this.dispayedMessagesLogin).first();\r\n        let key = await this.db.PublicKeyForEncript.filter(x => x.id == contactForSend.PublicKeyForEncriptId).first();\r\n        var keyForEncript = forge.pki.rsa.setPublicKey(key.n, key.e);\r\n        let encriptedMessage = await this.rsaService.EncriptMessage(this.sendedMessage, keyForEncript);\r\n        let message = {\r\n            data: encriptedMessage, senderId: this.user.id,\r\n            recipientId: contactForSend.ContactId\r\n        };\r\n        await this.WebSocketService.sendMessage(message);\r\n        let addedMessage = { Data: this.sendedMessage, RecipientLogin: contactForSend.Login, IsSender: true };\r\n        await this.db.Messages.add(addedMessage);\r\n        this.messageList = [];\r\n        this.sendedMessage = \"\";\r\n        await this.DisplayMissages(contactForSend.Login);\r\n    }\r\n};\r\n__decorate([\r\n    Input()\r\n], MessageListComponent.prototype, \"displayedUserLogin\", void 0);\r\nMessageListComponent = __decorate([\r\n    Component({\r\n        selector: 'message-list-component',\r\n        templateUrl: './message.list.component.html',\r\n        styleUrls: ['./message.list.component.css']\r\n    })\r\n], MessageListComponent);\r\nexport { MessageListComponent };\r\n"]},"metadata":{},"sourceType":"module"}