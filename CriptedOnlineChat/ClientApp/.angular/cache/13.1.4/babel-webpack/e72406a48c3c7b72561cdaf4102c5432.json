{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport * as forge from 'node-forge';\nlet MessageListComponent = class MessageListComponent {\n  constructor(db, dataService, webSocketService, rsaService) {\n    // variables to display\n    this.messageList = [];\n    this.user = {\n      Login: \"\"\n    };\n    this.isKeyExchangeCompleted = false; // variables to html\n\n    this.sendedMessage = \"\";\n    this.dispayedMessagesLogin = \"\";\n    this.DataService = dataService;\n    this.db = db;\n    this.WebSocketService = webSocketService;\n    this.rsaService = rsaService;\n  }\n\n  ngDoCheck() {\n    if (this.isKeyExchangeCompleted) {\n      $(\".messageClass\").hide();\n    } else {\n      $(\".messageClass\").show();\n    }\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.DataService.currentDisplayedLogin.subscribe(currentDisplayedLogin => {\n        _this.DisplayMissages(currentDisplayedLogin);\n\n        _this.dispayedMessagesLogin = currentDisplayedLogin;\n        $('.recipientName').text(currentDisplayedLogin);\n      });\n      yield _this.db.User.toArray().then(x => _this.user = x[0]);\n    })();\n  }\n\n  DisplayMissages(dispayedMessagesLogin) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.messageList = [];\n      var messagesToDisplay = yield _this2.db.Messages.filter(x => x.RecipientLogin == dispayedMessagesLogin).toArray();\n      messagesToDisplay.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          let decriptedNewMessage = {\n            Data: element.Data,\n            IsSender: element.IsSender,\n            RecipientLogin: element.RecipientLogin\n          };\n\n          _this2.messageList.push(decriptedNewMessage);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  SendMessage() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.sendedMessage == \"\") {\n        return;\n      }\n\n      let contactForSend = yield _this3.db.Contacts.filter(x => x.Login == _this3.dispayedMessagesLogin).first();\n      let key = yield _this3.db.PublicKeyForEncript.filter(x => x.id == contactForSend.PublicKeyForEncriptId).first();\n      var keyForEncript = forge.pki.rsa.setPublicKey(key.n, key.e);\n      let encriptedMessage = yield _this3.rsaService.EncriptMessage(_this3.sendedMessage, keyForEncript);\n      let message = {\n        data: encriptedMessage,\n        senderId: _this3.user.id,\n        recipientId: contactForSend.ContactId\n      };\n      yield _this3.WebSocketService.sendMessage(message);\n      let addedMessage = {\n        Data: _this3.sendedMessage,\n        RecipientLogin: contactForSend.Login,\n        IsSender: true\n      };\n      yield _this3.db.Messages.add(addedMessage);\n      _this3.messageList = [];\n      _this3.sendedMessage = \"\";\n      yield _this3.DisplayMissages(contactForSend.Login);\n    })();\n  }\n\n};\n\n__decorate([Input()], MessageListComponent.prototype, \"displayedUserLogin\", void 0);\n\nMessageListComponent = __decorate([Component({\n  selector: 'message-list-component',\n  templateUrl: './message.list.component.html',\n  styleUrls: ['./message.list.component.css']\n})], MessageListComponent);\nexport { MessageListComponent };","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/HomeComponent/MessageListComponent/Message.list.component.ts"],"names":["__decorate","Component","Input","forge","MessageListComponent","constructor","db","dataService","webSocketService","rsaService","messageList","user","Login","isKeyExchangeCompleted","sendedMessage","dispayedMessagesLogin","DataService","WebSocketService","ngDoCheck","$","hide","show","ngOnInit","currentDisplayedLogin","subscribe","DisplayMissages","text","User","toArray","then","x","messagesToDisplay","Messages","filter","RecipientLogin","forEach","element","decriptedNewMessage","Data","IsSender","push","SendMessage","contactForSend","Contacts","first","key","PublicKeyForEncript","id","PublicKeyForEncriptId","keyForEncript","pki","rsa","setPublicKey","n","e","encriptedMessage","EncriptMessage","message","data","senderId","recipientId","ContactId","sendMessage","addedMessage","add","prototype","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, Input } from '@angular/core';\r\nimport * as forge from 'node-forge';\r\nlet MessageListComponent = class MessageListComponent {\r\n    constructor(db, dataService, webSocketService, rsaService) {\r\n        // variables to display\r\n        this.messageList = [];\r\n        this.user = { Login: \"\" };\r\n        this.isKeyExchangeCompleted = false;\r\n        // variables to html\r\n        this.sendedMessage = \"\";\r\n        this.dispayedMessagesLogin = \"\";\r\n        this.DataService = dataService;\r\n        this.db = db;\r\n        this.WebSocketService = webSocketService;\r\n        this.rsaService = rsaService;\r\n    }\r\n    ngDoCheck() {\r\n        if (this.isKeyExchangeCompleted) {\r\n            $(\".messageClass\").hide();\r\n        }\r\n        else {\r\n            $(\".messageClass\").show();\r\n        }\r\n    }\r\n    async ngOnInit() {\r\n        await this.DataService.currentDisplayedLogin.subscribe((currentDisplayedLogin) => {\r\n            this.DisplayMissages(currentDisplayedLogin);\r\n            this.dispayedMessagesLogin = currentDisplayedLogin;\r\n            $('.recipientName').text(currentDisplayedLogin);\r\n        });\r\n        await this.db.User.toArray().then(x => this.user = x[0]);\r\n    }\r\n    async DisplayMissages(dispayedMessagesLogin) {\r\n        this.messageList = [];\r\n        var messagesToDisplay = await this.db.Messages.filter(x => x.RecipientLogin == dispayedMessagesLogin).toArray();\r\n        messagesToDisplay.forEach(async (element) => {\r\n            let decriptedNewMessage = { Data: element.Data, IsSender: element.IsSender, RecipientLogin: element.RecipientLogin };\r\n            this.messageList.push(decriptedNewMessage);\r\n        });\r\n    }\r\n    async SendMessage() {\r\n        if (this.sendedMessage == \"\") {\r\n            return;\r\n        }\r\n        let contactForSend = await this.db.Contacts.filter(x => x.Login == this.dispayedMessagesLogin).first();\r\n        let key = await this.db.PublicKeyForEncript.filter(x => x.id == contactForSend.PublicKeyForEncriptId).first();\r\n        var keyForEncript = forge.pki.rsa.setPublicKey(key.n, key.e);\r\n        let encriptedMessage = await this.rsaService.EncriptMessage(this.sendedMessage, keyForEncript);\r\n        let message = {\r\n            data: encriptedMessage, senderId: this.user.id,\r\n            recipientId: contactForSend.ContactId\r\n        };\r\n        await this.WebSocketService.sendMessage(message);\r\n        let addedMessage = { Data: this.sendedMessage, RecipientLogin: contactForSend.Login, IsSender: true };\r\n        await this.db.Messages.add(addedMessage);\r\n        this.messageList = [];\r\n        this.sendedMessage = \"\";\r\n        await this.DisplayMissages(contactForSend.Login);\r\n    }\r\n};\r\n__decorate([\r\n    Input()\r\n], MessageListComponent.prototype, \"displayedUserLogin\", void 0);\r\nMessageListComponent = __decorate([\r\n    Component({\r\n        selector: 'message-list-component',\r\n        templateUrl: './message.list.component.html',\r\n        styleUrls: ['./message.list.component.css']\r\n    })\r\n], MessageListComponent);\r\nexport { MessageListComponent };\r\n"]},"metadata":{},"sourceType":"module"}