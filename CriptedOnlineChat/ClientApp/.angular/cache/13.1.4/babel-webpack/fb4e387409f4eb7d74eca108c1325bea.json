{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/db\";\nimport * as i2 from \"./rsa.service\";\nexport class MessageService {\n  constructor(AppDB, rsaService) {\n    this.AppDB = AppDB;\n    this.rsaService = rsaService;\n  }\n\n  SendMessage(rsaService) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.rsaService = rsaService;\n    })();\n  }\n\n  AddNewMessages(addedmessages) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      addedmessages.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          console.log(element);\n          let recipientLogin = (yield _this2.AppDB.Contacts.filter(x => x.ContactId == element.senderId).first()).Login;\n          let recipientPrivateKeyId = (yield _this2.AppDB.Contacts.filter(x => x.ContactId == element.senderId).first()).PrivateKeyId;\n          let privateKeyForDecript = yield _this2.AppDB.PrivateKey.filter(x => x.id == recipientPrivateKeyId).first();\n          let decriptedMessage = yield _this2.rsaService.DecriptMessage(element.data, privateKeyForDecript);\n          let newMessage = {\n            Data: decriptedMessage,\n            RecipientLogin: recipientLogin,\n            IsSender: false\n          };\n          yield _this2.AppDB.Messages.add(newMessage);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.RSAService));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});\nexport class SendMessageDTO {}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/message.service.ts"],"names":["i0","i1","i2","MessageService","constructor","AppDB","rsaService","SendMessage","AddNewMessages","addedmessages","forEach","element","console","log","recipientLogin","Contacts","filter","x","ContactId","senderId","first","Login","recipientPrivateKeyId","PrivateKeyId","privateKeyForDecript","PrivateKey","id","decriptedMessage","DecriptMessage","data","newMessage","Data","RecipientLogin","IsSender","Messages","add","ɵfac","MessageService_Factory","t","ɵɵinject","RSAService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","SendMessageDTO"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,QAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,UAAR,EAAoB;AAC3B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACKC,EAAAA,WAAW,CAACD,UAAD,EAAa;AAAA;;AAAA;AAC1B,MAAA,KAAI,CAACA,UAAL,GAAkBA,UAAlB;AAD0B;AAE7B;;AACKE,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAAA;;AAAA;AAChCA,MAAAA,aAAa,CAACC,OAAd;AAAA,qCAAsB,WAAOC,OAAP,EAAmB;AACrCC,UAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,cAAIG,cAAc,GAAG,OAAO,MAAI,CAACT,KAAL,CAAWU,QAAX,CAAoBC,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,SAAF,IAAeP,OAAO,CAACQ,QAAvD,EAAiEC,KAAjE,EAAP,EAAiFC,KAAtG;AACA,cAAIC,qBAAqB,GAAG,OAAO,MAAI,CAACjB,KAAL,CAAWU,QAAX,CAAoBC,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,SAAF,IAAeP,OAAO,CAACQ,QAAvD,EAAiEC,KAAjE,EAAP,EAAiFG,YAA7G;AACA,cAAIC,oBAAoB,SAAS,MAAI,CAACnB,KAAL,CAAWoB,UAAX,CAAsBT,MAAtB,CAA6BC,CAAC,IAAIA,CAAC,CAACS,EAAF,IAAQJ,qBAA1C,EAAiEF,KAAjE,EAAjC;AACA,cAAIO,gBAAgB,SAAS,MAAI,CAACrB,UAAL,CAAgBsB,cAAhB,CAA+BjB,OAAO,CAACkB,IAAvC,EAA6CL,oBAA7C,CAA7B;AACA,cAAIM,UAAU,GAAG;AAAEC,YAAAA,IAAI,EAAEJ,gBAAR;AAA0BK,YAAAA,cAAc,EAAElB,cAA1C;AAA0DmB,YAAAA,QAAQ,EAAE;AAApE,WAAjB;AACA,gBAAM,MAAI,CAAC5B,KAAL,CAAW6B,QAAX,CAAoBC,GAApB,CAAwBL,UAAxB,CAAN;AACH,SARD;;AAAA;AAAA;AAAA;AAAA;AADgC;AAUnC;;AAlBuB;;AAoB5B3B,cAAc,CAACiC,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAInC,cAAV,EAA0BH,EAAE,CAACuC,QAAH,CAAYtC,EAAE,CAACI,KAAf,CAA1B,EAAiDL,EAAE,CAACuC,QAAH,CAAYrC,EAAE,CAACsC,UAAf,CAAjD,CAAP;AAAsF,CAAjJ;;AACArC,cAAc,CAACsC,KAAf,GAAuB,aAAczC,EAAE,CAAC0C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAExC,cAAT;AAAyByC,EAAAA,OAAO,EAAEzC,cAAc,CAACiC,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC;AACA,OAAO,MAAMC,cAAN,CAAqB","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/db\";\r\nimport * as i2 from \"./rsa.service\";\r\nexport class MessageService {\r\n    constructor(AppDB, rsaService) {\r\n        this.AppDB = AppDB;\r\n        this.rsaService = rsaService;\r\n    }\r\n    async SendMessage(rsaService) {\r\n        this.rsaService = rsaService;\r\n    }\r\n    async AddNewMessages(addedmessages) {\r\n        addedmessages.forEach(async (element) => {\r\n            console.log(element);\r\n            let recipientLogin = (await this.AppDB.Contacts.filter(x => x.ContactId == element.senderId).first()).Login;\r\n            let recipientPrivateKeyId = (await this.AppDB.Contacts.filter(x => x.ContactId == element.senderId).first()).PrivateKeyId;\r\n            let privateKeyForDecript = await this.AppDB.PrivateKey.filter(x => x.id == recipientPrivateKeyId).first();\r\n            let decriptedMessage = await this.rsaService.DecriptMessage(element.data, privateKeyForDecript);\r\n            let newMessage = { Data: decriptedMessage, RecipientLogin: recipientLogin, IsSender: false };\r\n            await this.AppDB.Messages.add(newMessage);\r\n        });\r\n    }\r\n}\r\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.RSAService)); };\r\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\r\nexport class SendMessageDTO {\r\n}\r\n"]},"metadata":{},"sourceType":"module"}