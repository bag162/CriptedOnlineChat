{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl + \"schatHub\";\n    this.HubConnection = new HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(\"http://localhost:5172/schatHub\").build();\n    this.HubConnection.start();\n    this.initWebSocket();\n  }\n\n  initWebSocket() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.HubConnection.on(\"Test\", message => {\n        console.log(message);\n      });\n      yield _this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => {\n        _this.AddNewRSAKeysServer(rsaKeys);\n      });\n    })();\n  }\n\n  sendMessage(message, recipientLogin) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.HubConnection.send(\"SendMessage\", message, recipientLogin);\n    })();\n  }\n\n  SendPublicRSAKey(rsaKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.HubConnection.send(\"SendRSAKeys\", rsaKey);\n    })();\n  }\n\n  AddNewRSAKeysServer(keys) {\n    return _asyncToGenerator(function* () {\n      console.log(keys);\n    })();\n  }\n\n}\n\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL'));\n};\n\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/WebSocket.service.ts"],"names":["signalR","HubConnectionBuilder","i0","WebSocketService","constructor","baseUrl","HubConnection","configureLogging","LogLevel","Debug","withUrl","build","start","initWebSocket","on","message","console","log","rsaKeys","AddNewRSAKeysServer","sendMessage","recipientLogin","send","SendPublicRSAKey","rsaKey","keys","ɵfac","WebSocketService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,oBAAzB;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAO,GAAG,UAAzB;AACA,SAAKC,aAAL,GAAqB,IAAIL,oBAAJ,GAChBM,gBADgB,CACCP,OAAO,CAACQ,QAAR,CAAiBC,KADlB,EAEhBC,OAFgB,CAER,gCAFQ,EAGhBC,KAHgB,EAArB;AAIA,SAAKL,aAAL,CAAmBM,KAAnB;AACA,SAAKC,aAAL;AACH;;AACKA,EAAAA,aAAa,GAAG;AAAA;;AAAA;AAClB,YAAM,KAAI,CAACP,aAAL,CAAmBQ,EAAnB,CAAsB,MAAtB,EAA8BC,OAAO,IAAI;AAAEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAAuB,OAAlE,CAAN;AACA,YAAM,KAAI,CAACT,aAAL,CAAmBQ,EAAnB,CAAsB,eAAtB,EAAuCI,OAAO,IAAI;AAAE,QAAA,KAAI,CAACC,mBAAL,CAAyBD,OAAzB;AAAoC,OAAxF,CAAN;AAFkB;AAGrB;;AACKE,EAAAA,WAAW,CAACL,OAAD,EAAUM,cAAV,EAA0B;AAAA;;AAAA;AACvC,YAAM,MAAI,CAACf,aAAL,CAAmBgB,IAAnB,CAAwB,aAAxB,EAAuCP,OAAvC,EAAgDM,cAAhD,CAAN;AADuC;AAE1C;;AACKE,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AAAA;;AAAA;AAC3B,YAAM,MAAI,CAAClB,aAAL,CAAmBgB,IAAnB,CAAwB,aAAxB,EAAuCE,MAAvC,CAAN;AAD2B;AAE9B;;AACKL,EAAAA,mBAAmB,CAACM,IAAD,EAAO;AAAA;AAC5BT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AAD4B;AAE/B;;AAtByB;;AAwB9BtB,gBAAgB,CAACuB,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIzB,gBAAV,EAA4BD,EAAE,CAAC2B,QAAH,CAAY,UAAZ,CAA5B,CAAP;AAA8D,CAA7H;;AACA1B,gBAAgB,CAAC2B,KAAjB,GAAyB,aAAc5B,EAAE,CAAC6B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,gBAAT;AAA2B8B,EAAAA,OAAO,EAAE9B,gBAAgB,CAACuB,IAArD;AAA2DQ,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC","sourcesContent":["import * as signalR from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport * as i0 from \"@angular/core\";\r\nexport class WebSocketService {\r\n    constructor(baseUrl) {\r\n        this.baseUrl = baseUrl + \"schatHub\";\r\n        this.HubConnection = new HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(\"http://localhost:5172/schatHub\")\r\n            .build();\r\n        this.HubConnection.start();\r\n        this.initWebSocket();\r\n    }\r\n    async initWebSocket() {\r\n        await this.HubConnection.on(\"Test\", message => { console.log(message); });\r\n        await this.HubConnection.on(\"AddNewRSAKeys\", rsaKeys => { this.AddNewRSAKeysServer(rsaKeys); });\r\n    }\r\n    async sendMessage(message, recipientLogin) {\r\n        await this.HubConnection.send(\"SendMessage\", message, recipientLogin);\r\n    }\r\n    async SendPublicRSAKey(rsaKey) {\r\n        await this.HubConnection.send(\"SendRSAKeys\", rsaKey);\r\n    }\r\n    async AddNewRSAKeysServer(keys) {\r\n        console.log(keys);\r\n    }\r\n}\r\nWebSocketService.ɵfac = function WebSocketService_Factory(t) { return new (t || WebSocketService)(i0.ɵɵinject('BASE_URL')); };\r\nWebSocketService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WebSocketService, factory: WebSocketService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}