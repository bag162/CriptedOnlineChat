{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/db\";\nimport * as i2 from \"./websocket.service\";\nimport * as i3 from \"./rsa.service\";\nexport class RSAKeysService {\n  constructor(AppDB, WebSocketService, rsaService) {\n    this.rsaService = rsaService;\n    this.appDB = AppDB;\n    this.WebSocketService = WebSocketService;\n  }\n\n  AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let pubKey = {\n        id: idKey,\n        n: key.n,\n        e: key.e\n      };\n\n      if (isRecipientKey) {\n        _this.appDB.PublicKeyForEncript.add(pubKey);\n      } else {\n        _this.appDB.PublicKey.add(pubKey);\n      }\n    })();\n  }\n\n  AddPrivateKeyToLocalDB(privateKey, idKey) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let prKey = {\n        id: idKey,\n        n: privateKey.n,\n        e: privateKey.e,\n        d: privateKey.d,\n        p: privateKey.p,\n        q: privateKey.q,\n        dP: privateKey.dP,\n        dQ: privateKey.dQ,\n        qInv: privateKey.qInv\n      };\n      yield _this2.appDB.PrivateKey.add(prKey);\n    })();\n  }\n\n  SendRSAPublicKey(senderid, recipientId, pubKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let sendedRsa = {\n        senderUserId: senderid,\n        recipientUserId: recipientId,\n        nDataJson: JSON.stringify(pubKey.n.data),\n        ns: pubKey.n.s,\n        nt: pubKey.n.t,\n        eDataJson: JSON.stringify(pubKey.e.data),\n        es: pubKey.e.s,\n        et: pubKey.e.t\n      };\n      console.log(sendedRsa);\n      yield _this3.WebSocketService.SendPublicRSAKey(sendedRsa);\n    })();\n  }\n\n  AddNewRSAKeysServer(keys) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      keys.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          // parsing data\n          let insertedPubKey = {\n            id: uuidv4()\n          }; // parse n data\n\n          let n = new forge.jsbn.BigInteger(null);\n          n.s = element.ns;\n          n.t = element.nt;\n          n.data = JSON.parse(element.nDataJson); // parse e data\n\n          let e = new forge.jsbn.BigInteger(null);\n          e.s = element.es;\n          e.t = element.et;\n          e.data = JSON.parse(element.eDataJson);\n          insertedPubKey.e = e;\n          insertedPubKey.n = n; // add to db\n\n          _this4.appDB.PublicKeyForEncript.add(insertedPubKey);\n\n          let isContaints = (yield _this4.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count()) == 0;\n\n          if (isContaints) {\n            var keyPair = yield _this4.rsaService.GenerateKeyPair();\n            let pubKeyId = uuidv4();\n            let prtKeyId = uuidv4();\n            yield _this4.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\n            yield _this4.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\n            yield _this4.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\n            let newContact = {\n              Login: element.senderLogin\n            };\n            newContact.ContactId = element.senderUserId;\n            newContact.Login = element.senderLogin;\n            newContact.PublicKeyForEncriptId = insertedPubKey.id;\n            newContact.PrivateKeyId = prtKeyId;\n            newContact.PublicKeyId = pubKeyId;\n\n            _this4.appDB.Contacts.add(newContact);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nRSAKeysService.ɵfac = function RSAKeysService_Factory(t) {\n  return new (t || RSAKeysService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.WebSocketService), i0.ɵɵinject(i3.RSAService));\n};\n\nRSAKeysService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAKeysService,\n  factory: RSAKeysService.ɵfac,\n  providedIn: 'root'\n});\nexport class SendRSAPublicKeyDTO {\n  constructor() {\n    this.senderLogin = \"\";\n    this.senderUserId = \"\";\n    this.recipientUserId = \"\";\n    this.nt = 0;\n    this.ns = 0;\n    this.et = 0;\n    this.es = 0;\n    this.nDataJson = \"\";\n    this.eDataJson = \"\";\n  }\n\n}\n\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) {\n  return new (t || SendRSAPublicKeyDTO)();\n};\n\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SendRSAPublicKeyDTO,\n  factory: SendRSAPublicKeyDTO.ɵfac,\n  providedIn: 'root'\n});\n\nfunction uuidv4() {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.keys.service.ts"],"names":["forge","i0","i1","i2","i3","RSAKeysService","constructor","AppDB","WebSocketService","rsaService","appDB","AddPublicKeyToLocalDB","key","isRecipientKey","idKey","pubKey","id","n","e","PublicKeyForEncript","add","PublicKey","AddPrivateKeyToLocalDB","privateKey","prKey","d","p","q","dP","dQ","qInv","PrivateKey","SendRSAPublicKey","senderid","recipientId","sendedRsa","senderUserId","recipientUserId","nDataJson","JSON","stringify","data","ns","s","nt","t","eDataJson","es","et","console","log","SendPublicRSAKey","AddNewRSAKeysServer","keys","forEach","element","insertedPubKey","uuidv4","jsbn","BigInteger","parse","isContaints","Contacts","filter","x","ContactId","count","keyPair","GenerateKeyPair","pubKeyId","prtKeyId","publicKey","newContact","Login","senderLogin","PublicKeyForEncriptId","PrivateKeyId","PublicKeyId","ɵfac","RSAKeysService_Factory","ɵɵinject","RSAService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","SendRSAPublicKeyDTO","SendRSAPublicKeyDTO_Factory","Error"],"mappings":"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","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/db\";\r\nimport * as i2 from \"./websocket.service\";\r\nimport * as i3 from \"./rsa.service\";\r\nexport class RSAKeysService {\r\n    constructor(AppDB, WebSocketService, rsaService) {\r\n        this.rsaService = rsaService;\r\n        this.appDB = AppDB;\r\n        this.WebSocketService = WebSocketService;\r\n    }\r\n    async AddPublicKeyToLocalDB(key, isRecipientKey, idKey) {\r\n        let pubKey = { id: idKey, n: key.n, e: key.e };\r\n        if (isRecipientKey) {\r\n            this.appDB.PublicKeyForEncript.add(pubKey);\r\n        }\r\n        else {\r\n            this.appDB.PublicKey.add(pubKey);\r\n        }\r\n    }\r\n    async AddPrivateKeyToLocalDB(privateKey, idKey) {\r\n        let prKey = {\r\n            id: idKey, n: privateKey.n, e: privateKey.e,\r\n            d: privateKey.d, p: privateKey.p, q: privateKey.q,\r\n            dP: privateKey.dP, dQ: privateKey.dQ, qInv: privateKey.qInv\r\n        };\r\n        await this.appDB.PrivateKey.add(prKey);\r\n    }\r\n    async SendRSAPublicKey(senderid, recipientId, pubKey) {\r\n        let sendedRsa = {\r\n            senderUserId: senderid,\r\n            recipientUserId: recipientId, nDataJson: JSON.stringify(pubKey.n.data),\r\n            ns: pubKey.n.s, nt: pubKey.n.t, eDataJson: JSON.stringify(pubKey.e.data), es: pubKey.e.s, et: pubKey.e.t\r\n        };\r\n        console.log(sendedRsa);\r\n        await this.WebSocketService.SendPublicRSAKey(sendedRsa);\r\n    }\r\n    async AddNewRSAKeysServer(keys) {\r\n        keys.forEach(async (element) => {\r\n            // parsing data\r\n            let insertedPubKey = { id: uuidv4() };\r\n            // parse n data\r\n            let n = new forge.jsbn.BigInteger(null);\r\n            n.s = element.ns;\r\n            n.t = element.nt;\r\n            n.data = JSON.parse(element.nDataJson);\r\n            // parse e data\r\n            let e = new forge.jsbn.BigInteger(null);\r\n            e.s = element.es;\r\n            e.t = element.et;\r\n            e.data = JSON.parse(element.eDataJson);\r\n            insertedPubKey.e = e;\r\n            insertedPubKey.n = n;\r\n            // add to db\r\n            this.appDB.PublicKeyForEncript.add(insertedPubKey);\r\n            let isContaints = await this.appDB.Contacts.filter(x => x.ContactId == element.senderUserId).count() == 0;\r\n            if (isContaints) {\r\n                var keyPair = await this.rsaService.GenerateKeyPair();\r\n                let pubKeyId = uuidv4();\r\n                let prtKeyId = uuidv4();\r\n                await this.AddPublicKeyToLocalDB(keyPair.publicKey, false, pubKeyId);\r\n                await this.AddPrivateKeyToLocalDB(keyPair.privateKey, prtKeyId);\r\n                await this.SendRSAPublicKey(element.recipientUserId, element.senderUserId, keyPair.publicKey);\r\n                let newContact = { Login: element.senderLogin };\r\n                newContact.ContactId = element.senderUserId;\r\n                newContact.Login = element.senderLogin;\r\n                newContact.PublicKeyForEncriptId = insertedPubKey.id;\r\n                newContact.PrivateKeyId = prtKeyId;\r\n                newContact.PublicKeyId = pubKeyId;\r\n                this.appDB.Contacts.add(newContact);\r\n            }\r\n        });\r\n    }\r\n}\r\nRSAKeysService.ɵfac = function RSAKeysService_Factory(t) { return new (t || RSAKeysService)(i0.ɵɵinject(i1.AppDB), i0.ɵɵinject(i2.WebSocketService), i0.ɵɵinject(i3.RSAService)); };\r\nRSAKeysService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAKeysService, factory: RSAKeysService.ɵfac, providedIn: 'root' });\r\nexport class SendRSAPublicKeyDTO {\r\n    constructor() {\r\n        this.senderLogin = \"\";\r\n        this.senderUserId = \"\";\r\n        this.recipientUserId = \"\";\r\n        this.nt = 0;\r\n        this.ns = 0;\r\n        this.et = 0;\r\n        this.es = 0;\r\n        this.nDataJson = \"\";\r\n        this.eDataJson = \"\";\r\n    }\r\n}\r\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) { return new (t || SendRSAPublicKeyDTO)(); };\r\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SendRSAPublicKeyDTO, factory: SendRSAPublicKeyDTO.ɵfac, providedIn: 'root' });\r\nfunction uuidv4() {\r\n    throw new Error('Function not implemented.');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}