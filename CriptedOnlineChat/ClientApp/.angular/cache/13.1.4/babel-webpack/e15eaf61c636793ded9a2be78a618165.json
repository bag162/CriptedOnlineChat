{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./WebSocket.service\";\nexport class RSAService {\n  constructor(WebSocketService) {\n    this.WebSocketService = WebSocketService;\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001,\n        workers: 2\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message, publicKey) {\n    return _asyncToGenerator(function* () {\n      return yield publicKey.encrypt(forge.util.encodeUtf8(message));\n      ;\n    })();\n  }\n\n  DecriptMessage(message, privateKey) {\n    return _asyncToGenerator(function* () {\n      return forge.util.decodeUtf8(yield privateKey.decrypt(message));\n    })();\n  }\n\n  SendRSAPublicKey(rsaKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.WebSocketService.SendPublicRSAKey(rsaKey);\n    })();\n  }\n\n  AddNewRSAKeysServer(keys) {\n    return _asyncToGenerator(function* () {\n      console.log(keys);\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)(i0.ɵɵinject(i1.WebSocketService));\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\nexport class SendRSAPublicKeyDTO {}\n\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) {\n  return new (t || SendRSAPublicKeyDTO)();\n};\n\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SendRSAPublicKeyDTO,\n  factory: SendRSAPublicKeyDTO.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/rsa.service.ts"],"names":["forge","i0","i1","RSAService","constructor","WebSocketService","GenerateKeyPair","keyPair","pki","rsa","generateKeyPair","bits","e","workers","EncriptMessage","message","publicKey","encrypt","util","encodeUtf8","DecriptMessage","privateKey","decodeUtf8","decrypt","SendRSAPublicKey","rsaKey","SendPublicRSAKey","AddNewRSAKeysServer","keys","console","log","ɵfac","RSAService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","SendRSAPublicKeyDTO","SendRSAPublicKeyDTO_Factory"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,gBAAD,EAAmB;AAC1B,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH;;AACKC,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIC,OAAO,SAASP,KAAK,CAACQ,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE,OAAjB;AAA0BC,QAAAA,OAAO,EAAE;AAAnC,OAA9B,CAApB;AACA,aAAON,OAAP;AAFoB;AAGvB;;AACKO,EAAAA,cAAc,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAAA;AACrC,mBAAaA,SAAS,CAACC,OAAV,CAAkBjB,KAAK,CAACkB,IAAN,CAAWC,UAAX,CAAsBJ,OAAtB,CAAlB,CAAb;AACA;AAFqC;AAGxC;;AACKK,EAAAA,cAAc,CAACL,OAAD,EAAUM,UAAV,EAAsB;AAAA;AACtC,aAAOrB,KAAK,CAACkB,IAAN,CAAWI,UAAX,OAA4BD,UAAU,CAACE,OAAX,CAAmBR,OAAnB,CAA5B,CAAP;AADsC;AAEzC;;AACKS,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AAAA;;AAAA;AAC3B,YAAM,KAAI,CAACpB,gBAAL,CAAsBqB,gBAAtB,CAAuCD,MAAvC,CAAN;AAD2B;AAE9B;;AACKE,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AAAA;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAD4B;AAE/B;;AApBmB;;AAsBxBzB,UAAU,CAAC4B,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAI9B,UAAV,EAAsBF,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACG,gBAAf,CAAtB,CAAP;AAAiE,CAApH;;AACAF,UAAU,CAACgC,KAAX,GAAmB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,UAAT;AAAqBmC,EAAAA,OAAO,EAAEnC,UAAU,CAAC4B,IAAzC;AAA+CQ,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC;AACA,OAAO,MAAMC,mBAAN,CAA0B;;AAEjCA,mBAAmB,CAACT,IAApB,GAA2B,SAASU,2BAAT,CAAqCR,CAArC,EAAwC;AAAE,SAAO,KAAKA,CAAC,IAAIO,mBAAV,GAAP;AAA0C,CAA/G;;AACAA,mBAAmB,CAACL,KAApB,GAA4B,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEG,mBAAT;AAA8BF,EAAAA,OAAO,EAAEE,mBAAmB,CAACT,IAA3D;AAAiEQ,EAAAA,UAAU,EAAE;AAA7E,CAAtB,CAA1C","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./WebSocket.service\";\r\nexport class RSAService {\r\n    constructor(WebSocketService) {\r\n        this.WebSocketService = WebSocketService;\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001, workers: 2 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message, publicKey) {\r\n        return await publicKey.encrypt(forge.util.encodeUtf8(message));\r\n        ;\r\n    }\r\n    async DecriptMessage(message, privateKey) {\r\n        return forge.util.decodeUtf8(await privateKey.decrypt(message));\r\n    }\r\n    async SendRSAPublicKey(rsaKey) {\r\n        await this.WebSocketService.SendPublicRSAKey(rsaKey);\r\n    }\r\n    async AddNewRSAKeysServer(keys) {\r\n        console.log(keys);\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(i0.ɵɵinject(i1.WebSocketService)); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nexport class SendRSAPublicKeyDTO {\r\n}\r\nSendRSAPublicKeyDTO.ɵfac = function SendRSAPublicKeyDTO_Factory(t) { return new (t || SendRSAPublicKeyDTO)(); };\r\nSendRSAPublicKeyDTO.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SendRSAPublicKeyDTO, factory: SendRSAPublicKeyDTO.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}