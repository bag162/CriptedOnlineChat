{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./WebSocket.service\";\nimport * as i2 from \"src/db\";\nexport class MessageService {\n  constructor(webSocketService, AppDB) {\n    this.webSocketService = webSocketService;\n    this.AppDB = AppDB;\n  }\n\n  SendMessage(sendedMessage) {// todo send message\n\n    return _asyncToGenerator(function* () {})();\n  }\n\n  AddNewMessages(addedmessages) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      addedmessages.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          let recipientLogin = (yield _this.AppDB.Contacts.filter(x => x.ContactId == element.RecipientId).first()).Login;\n          let newMessage = {\n            Data: element.Data,\n            RecipientLogin: recipientLogin,\n            IsSender: false\n          };\n          yield _this.AppDB.Messages.add(newMessage);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.WebSocketService), i0.ɵɵinject(i2.AppDB));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});\nexport class SendMessageDTO {}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/Services/message.service.ts"],"names":["i0","i1","i2","MessageService","constructor","webSocketService","AppDB","SendMessage","sendedMessage","AddNewMessages","addedmessages","forEach","element","recipientLogin","Contacts","filter","x","ContactId","RecipientId","first","Login","newMessage","Data","RecipientLogin","IsSender","Messages","add","ɵfac","MessageService_Factory","t","ɵɵinject","WebSocketService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","SendMessageDTO"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,QAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,gBAAD,EAAmBC,KAAnB,EAA0B;AACjC,SAAKD,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AACKC,EAAAA,WAAW,CAACC,aAAD,EAAgB,CAC7B;;AAD6B;AAEhC;;AACKC,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAAA;;AAAA;AAChCA,MAAAA,aAAa,CAACC,OAAd;AAAA,qCAAsB,WAAOC,OAAP,EAAmB;AACrC,cAAIC,cAAc,GAAG,OAAO,KAAI,CAACP,KAAL,CAAWQ,QAAX,CAAoBC,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,SAAF,IAAeL,OAAO,CAACM,WAAvD,EAAoEC,KAApE,EAAP,EAAoFC,KAAzG;AACA,cAAIC,UAAU,GAAG;AAAEC,YAAAA,IAAI,EAAEV,OAAO,CAACU,IAAhB;AAAsBC,YAAAA,cAAc,EAAEV,cAAtC;AAAsDW,YAAAA,QAAQ,EAAE;AAAhE,WAAjB;AACA,gBAAM,KAAI,CAAClB,KAAL,CAAWmB,QAAX,CAAoBC,GAApB,CAAwBL,UAAxB,CAAN;AACH,SAJD;;AAAA;AAAA;AAAA;AAAA;AADgC;AAMnC;;AAduB;;AAgB5BlB,cAAc,CAACwB,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI1B,cAAV,EAA0BH,EAAE,CAAC8B,QAAH,CAAY7B,EAAE,CAAC8B,gBAAf,CAA1B,EAA4D/B,EAAE,CAAC8B,QAAH,CAAY5B,EAAE,CAACI,KAAf,CAA5D,CAAP;AAA4F,CAAvJ;;AACAH,cAAc,CAAC6B,KAAf,GAAuB,aAAchC,EAAE,CAACiC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE/B,cAAT;AAAyBgC,EAAAA,OAAO,EAAEhC,cAAc,CAACwB,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC;AACA,OAAO,MAAMC,cAAN,CAAqB","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./WebSocket.service\";\r\nimport * as i2 from \"src/db\";\r\nexport class MessageService {\r\n    constructor(webSocketService, AppDB) {\r\n        this.webSocketService = webSocketService;\r\n        this.AppDB = AppDB;\r\n    }\r\n    async SendMessage(sendedMessage) {\r\n        // todo send message\r\n    }\r\n    async AddNewMessages(addedmessages) {\r\n        addedmessages.forEach(async (element) => {\r\n            let recipientLogin = (await this.AppDB.Contacts.filter(x => x.ContactId == element.RecipientId).first()).Login;\r\n            let newMessage = { Data: element.Data, RecipientLogin: recipientLogin, IsSender: false };\r\n            await this.AppDB.Messages.add(newMessage);\r\n        });\r\n    }\r\n}\r\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.WebSocketService), i0.ɵɵinject(i2.AppDB)); };\r\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\r\nexport class SendMessageDTO {\r\n}\r\n"]},"metadata":{},"sourceType":"module"}