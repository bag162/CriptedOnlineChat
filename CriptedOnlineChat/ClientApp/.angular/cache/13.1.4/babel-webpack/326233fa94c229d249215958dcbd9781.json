{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor() {}\n\n  InitService() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let publicKey;\n      let privateKey;\n\n      _this.GenerateKeyPair().then(x => {\n        privateKey = x.privateKey;\n        publicKey = x.publicKey;\n      });\n    })();\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.publicKey != undefined) {\n        let encriptedMessage = yield _this2.publicKey.encrypt(message);\n        return encriptedMessage;\n      } else {\n        return \"undefined\"; // убрать костыль\n      }\n    })();\n  }\n\n  DecriptMessage(message) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.privateKey != undefined) {\n        let decriptedMessage = yield _this3.privateKey.decrypt(message);\n        return decriptedMessage;\n      } else {\n        return \"undefined\"; // тут то же убрать\n      }\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","RSAService","constructor","InitService","publicKey","privateKey","GenerateKeyPair","then","x","keyPair","pki","rsa","generateKeyPair","bits","e","EncriptMessage","message","undefined","encriptedMessage","encrypt","DecriptMessage","decriptedMessage","decrypt","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,UAAIC,SAAJ;AACA,UAAIC,UAAJ;;AACA,MAAA,KAAI,CAACC,eAAL,GAAuBC,IAAvB,CAA4BC,CAAC,IAAI;AAC7BH,QAAAA,UAAU,GAAGG,CAAC,CAACH,UAAf;AACAD,QAAAA,SAAS,GAAGI,CAAC,CAACJ,SAAd;AACH,OAHD;AAHgB;AAOnB;;AACKE,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIG,OAAO,SAASV,KAAK,CAACW,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAApB;AACA,aAAOL,OAAP;AAFoB;AAGvB;;AACKM,EAAAA,cAAc,CAACC,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACZ,SAAL,IAAkBa,SAAtB,EAAiC;AAC7B,YAAIC,gBAAgB,SAAS,MAAI,CAACd,SAAL,CAAee,OAAf,CAAuBH,OAAvB,CAA7B;AACA,eAAOE,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AACKE,EAAAA,cAAc,CAACJ,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACX,UAAL,IAAmBY,SAAvB,EAAkC;AAC9B,YAAII,gBAAgB,SAAS,MAAI,CAAChB,UAAL,CAAgBiB,OAAhB,CAAwBN,OAAxB,CAA7B;AACA,eAAOK,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AAhCmB;;AAkCxBpB,UAAU,CAACsB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIxB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACyB,KAAX,GAAmB,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,UAAT;AAAqB4B,EAAAA,OAAO,EAAE5B,UAAU,CAACsB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async InitService() {\r\n        let publicKey;\r\n        let privateKey;\r\n        this.GenerateKeyPair().then(x => {\r\n            privateKey = x.privateKey;\r\n            publicKey = x.publicKey;\r\n        });\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message) {\r\n        if (this.publicKey != undefined) {\r\n            let encriptedMessage = await this.publicKey.encrypt(message);\r\n            return encriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // убрать костыль\r\n        }\r\n    }\r\n    async DecriptMessage(message) {\r\n        if (this.privateKey != undefined) {\r\n            let decriptedMessage = await this.privateKey.decrypt(message);\r\n            return decriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // тут то же убрать\r\n        }\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}