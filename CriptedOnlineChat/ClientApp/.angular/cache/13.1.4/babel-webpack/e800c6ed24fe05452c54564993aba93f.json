{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor() {}\n\n  GenerateKeyPairs() {\n    return _asyncToGenerator(function* () {\n      let keysPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      let keys = new KeyPairs(keysPair.publicKey.n.toString(), keysPair.privateKey.n.toString());\n      console.log(\"public key: \" + keysPair.publicKey.n.toString() + \" , private key: \" + keysPair.privateKey.n.toString());\n      yield forg;\n      return keys;\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)();\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});\n\nclass KeyPairs {\n  constructor(publicKey, privateKey) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","RSAService","constructor","GenerateKeyPairs","keysPair","pki","rsa","generateKeyPair","bits","e","keys","KeyPairs","publicKey","n","toString","privateKey","console","log","forg","ɵfac","RSAService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,GAAG,CACb;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;AACrB,UAAIC,QAAQ,SAASL,KAAK,CAACM,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAArB;AACA,UAAIC,IAAI,GAAG,IAAIC,QAAJ,CAAaP,QAAQ,CAACQ,SAAT,CAAmBC,CAAnB,CAAqBC,QAArB,EAAb,EAA8CV,QAAQ,CAACW,UAAT,CAAoBF,CAApB,CAAsBC,QAAtB,EAA9C,CAAX;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBb,QAAQ,CAACQ,SAAT,CAAmBC,CAAnB,CAAqBC,QAArB,EAAjB,GAAmD,kBAAnD,GAAwEV,QAAQ,CAACW,UAAT,CAAoBF,CAApB,CAAsBC,QAAtB,EAApF;AACA,YAAMI,IAAN;AACA,aAAOR,IAAP;AALqB;AAMxB;;AATmB;;AAWxBT,UAAU,CAACkB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIpB,UAAV,GAAP;AAAiC,CAApF;;AACAA,UAAU,CAACqB,KAAX,GAAmB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvB,UAAT;AAAqBwB,EAAAA,OAAO,EAAExB,UAAU,CAACkB,IAAzC;AAA+CO,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC;;AACA,MAAMf,QAAN,CAAe;AACXT,EAAAA,WAAW,CAACU,SAAD,EAAYG,UAAZ,EAAwB;AAC/B,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKG,UAAL,GAAkBA,UAAlB;AACH;;AAJU","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor() {\r\n    }\r\n    async GenerateKeyPairs() {\r\n        let keysPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        let keys = new KeyPairs(keysPair.publicKey.n.toString(), keysPair.privateKey.n.toString());\r\n        console.log(\"public key: \" + keysPair.publicKey.n.toString() + \" , private key: \" + keysPair.privateKey.n.toString());\r\n        await forg;\r\n        return keys;\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\nclass KeyPairs {\r\n    constructor(publicKey, privateKey) {\r\n        this.publicKey = publicKey;\r\n        this.privateKey = privateKey;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}