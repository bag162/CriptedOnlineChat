{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { FindUserDTO } from 'src/app/Services/user.service';\nexport class ContactListComponent {\n  constructor(db, DataService, userService, rsaService) {\n    this.contactList = []; // Search variables\n\n    this.searchUserLogin = new FindUserDTO();\n    this.isSearchMode = false;\n    this.db = db;\n    this.DataService = DataService;\n    this.userService = userService;\n    this.rsaService = rsaService;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.fillContactList(); // submint searsh input when pressing enter\n\n      $(document).ready(function () {\n        $('input').keydown(function (e) {\n          if (e.keyCode === 13) {\n            $('.searchLoginInfo').click();\n          }\n        });\n      });\n    })();\n  }\n\n  fillContactList() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.contactList = yield _this2.db.Contacts.toArray();\n    })();\n  }\n\n  ChangeDisplayedMessages(newDesplayedUserLogin) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.isSearchMode) {\n        _this3.isSearchMode = false;\n\n        _this3.AddNewUserToLocalDb(newDesplayedUserLogin);\n\n        yield _this3.fillContactList();\n      }\n\n      _this3.DataService.currentDisplayedLogin.next(newDesplayedUserLogin.Login);\n    })();\n  }\n\n  searchUsers() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.searchUserLogin.login == \"\") {\n        return;\n      }\n\n      _this4.isSearchMode = true; // Получаем пользователей по запросу\n\n      let newDispayedUsers = [];\n      let result = yield _this4.userService.FindUsers(_this4.searchUserLogin); // TODO take preloader\n\n      result.forEach(element => {\n        var newContact = {\n          Login: element.login,\n          id: element.id\n        };\n        newDispayedUsers.push(newContact);\n      }); // Получаем пользователей находящихся в базе\n\n      var currentUsers = yield _this4.db.Contacts.toArray(); // Удаляем в списке пользователей, которые уже есть в контах\n\n      currentUsers.forEach(element => {\n        newDispayedUsers.forEach(element1 => {\n          if (element.Login == element1.Login) {\n            newDispayedUsers.splice(newDispayedUsers.indexOf(element1), 1);\n          }\n        });\n      });\n      $(\".users\").hide(500);\n      setTimeout(() => {\n        _this4.contactList = newDispayedUsers;\n        $(\".searchUsersDisplay\").show(500);\n      }, 500);\n    })();\n  }\n\n  AddNewUserToLocalDb(newUser) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var insertedUser = newUser;\n      var rsaKeys = yield _this5.rsaService.GenerateKeyPair();\n      var publicKeyId = crypto.randomUUID().toString();\n      var privateKeyId = crypto.randomUUID().toString();\n      insertedUser.PrivateKeyId = privateKeyId;\n      insertedUser.PublicKeyId = publicKeyId;\n\n      _this5.db.Contacts.add(insertedUser);\n\n      let prKey = {\n        id: privateKeyId,\n        n: rsaKeys.privateKey.n,\n        e: rsaKeys.privateKey.e,\n        d: rsaKeys.privateKey.d,\n        p: rsaKeys.privateKey.p,\n        q: rsaKeys.privateKey.q,\n        dP: rsaKeys.privateKey.dP,\n        dQ: rsaKeys.privateKey.dQ,\n        qInv: rsaKeys.privateKey.qInv\n      };\n      let pubKey = {\n        id: publicKeyId,\n        n: rsaKeys.publicKey.n,\n        e: rsaKeys.publicKey.e\n      };\n\n      _this5.db.PrivateKey.add(prKey);\n\n      _this5.db.PublicKey.add(pubKey);\n\n      _this5.backToContactListButton(); // send rsa key to backend\n\n    })();\n  }\n\n  backToContactListButton() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.isSearchMode = false;\n      $(\".searchUsersDisplay\").hide(500);\n      yield _this6.fillContactList();\n      _this6.searchUserLogin.login = \"\";\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/HomeComponent/ContactListComponent/contact.list.component.ts"],"names":["FindUserDTO","ContactListComponent","constructor","db","DataService","userService","rsaService","contactList","searchUserLogin","isSearchMode","ngOnInit","fillContactList","$","document","ready","keydown","e","keyCode","click","Contacts","toArray","ChangeDisplayedMessages","newDesplayedUserLogin","AddNewUserToLocalDb","currentDisplayedLogin","next","Login","searchUsers","login","newDispayedUsers","result","FindUsers","forEach","element","newContact","id","push","currentUsers","element1","splice","indexOf","hide","setTimeout","show","newUser","insertedUser","rsaKeys","GenerateKeyPair","publicKeyId","crypto","randomUUID","toString","privateKeyId","PrivateKeyId","PublicKeyId","add","prKey","n","privateKey","d","p","q","dP","dQ","qInv","pubKey","publicKey","PrivateKey","PublicKey","backToContactListButton"],"mappings":"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","sourcesContent":["import { FindUserDTO } from 'src/app/Services/user.service';\r\nexport class ContactListComponent {\r\n    constructor(db, DataService, userService, rsaService) {\r\n        this.contactList = [];\r\n        // Search variables\r\n        this.searchUserLogin = new FindUserDTO();\r\n        this.isSearchMode = false;\r\n        this.db = db;\r\n        this.DataService = DataService;\r\n        this.userService = userService;\r\n        this.rsaService = rsaService;\r\n    }\r\n    async ngOnInit() {\r\n        await this.fillContactList();\r\n        // submint searsh input when pressing enter\r\n        $(document).ready(function () {\r\n            $('input').keydown(function (e) {\r\n                if (e.keyCode === 13) {\r\n                    $('.searchLoginInfo').click();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async fillContactList() {\r\n        this.contactList = await this.db.Contacts.toArray();\r\n    }\r\n    async ChangeDisplayedMessages(newDesplayedUserLogin) {\r\n        if (this.isSearchMode) {\r\n            this.isSearchMode = false;\r\n            this.AddNewUserToLocalDb(newDesplayedUserLogin);\r\n            await this.fillContactList();\r\n        }\r\n        this.DataService.currentDisplayedLogin.next(newDesplayedUserLogin.Login);\r\n    }\r\n    async searchUsers() {\r\n        if (this.searchUserLogin.login == \"\") {\r\n            return;\r\n        }\r\n        this.isSearchMode = true;\r\n        // Получаем пользователей по запросу\r\n        let newDispayedUsers = [];\r\n        let result = await this.userService.FindUsers(this.searchUserLogin); // TODO take preloader\r\n        result.forEach(element => {\r\n            var newContact = { Login: element.login, id: element.id };\r\n            newDispayedUsers.push(newContact);\r\n        });\r\n        // Получаем пользователей находящихся в базе\r\n        var currentUsers = await this.db.Contacts.toArray();\r\n        // Удаляем в списке пользователей, которые уже есть в контах\r\n        currentUsers.forEach(element => {\r\n            newDispayedUsers.forEach(element1 => {\r\n                if (element.Login == element1.Login) {\r\n                    newDispayedUsers.splice(newDispayedUsers.indexOf(element1), 1);\r\n                }\r\n            });\r\n        });\r\n        $(\".users\").hide(500);\r\n        setTimeout(() => {\r\n            this.contactList = newDispayedUsers;\r\n            $(\".searchUsersDisplay\").show(500);\r\n        }, 500);\r\n    }\r\n    async AddNewUserToLocalDb(newUser) {\r\n        var insertedUser = newUser;\r\n        var rsaKeys = await this.rsaService.GenerateKeyPair();\r\n        var publicKeyId = crypto.randomUUID().toString();\r\n        var privateKeyId = crypto.randomUUID().toString();\r\n        insertedUser.PrivateKeyId = privateKeyId;\r\n        insertedUser.PublicKeyId = publicKeyId;\r\n        this.db.Contacts.add(insertedUser);\r\n        let prKey = { id: privateKeyId, n: rsaKeys.privateKey.n, e: rsaKeys.privateKey.e,\r\n            d: rsaKeys.privateKey.d, p: rsaKeys.privateKey.p, q: rsaKeys.privateKey.q,\r\n            dP: rsaKeys.privateKey.dP, dQ: rsaKeys.privateKey.dQ, qInv: rsaKeys.privateKey.qInv };\r\n        let pubKey = { id: publicKeyId, n: rsaKeys.publicKey.n, e: rsaKeys.publicKey.e };\r\n        this.db.PrivateKey.add(prKey);\r\n        this.db.PublicKey.add(pubKey);\r\n        this.backToContactListButton();\r\n        // send rsa key to backend\r\n    }\r\n    async backToContactListButton() {\r\n        this.isSearchMode = false;\r\n        $(\".searchUsersDisplay\").hide(500);\r\n        await this.fillContactList();\r\n        this.searchUserLogin.login = \"\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}