{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\source\\\\repos\\\\CriptedOnlineChat\\\\CriptedOnlineChat\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nexport class RSAService {\n  constructor(publicKey, privateKey) {\n    if (publicKey == undefined) {\n      this.GenerateKeyPair().then(x => {\n        this.privateKey = x.privateKey;\n        this.publicKey = x.publicKey;\n      });\n    } else {\n      this.publicKey = publicKey;\n      this.privateKey = privateKey;\n    }\n\n    forge.pki.rsa.setPrivateKey(privateKey.n, privateKey.e, privateKey.d, privateKey.p, privateKey.q, privateKey.dP, privateKey.dQ, privateKey.qInv);\n    forge.pki.rsa.setPublicKey(publicKey.n, publicKey.e);\n  }\n\n  InitService() {\n    return _asyncToGenerator(function* () {\n      let publicKey;\n      let privateKey;\n    })();\n  }\n\n  GenerateKeyPair() {\n    return _asyncToGenerator(function* () {\n      let keyPair = yield forge.pki.rsa.generateKeyPair({\n        bits: 2048,\n        e: 0x10001\n      });\n      return keyPair;\n    })();\n  }\n\n  EncriptMessage(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.publicKey != undefined) {\n        let encriptedMessage = yield _this.publicKey.encrypt(message);\n        return encriptedMessage;\n      } else {\n        return \"undefined\"; // убрать костыль\n      }\n    })();\n  }\n\n  DecriptMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.privateKey != undefined) {\n        let decriptedMessage = yield _this2.privateKey.decrypt(message);\n        return decriptedMessage;\n      } else {\n        return \"undefined\"; // тут то же убрать\n      }\n    })();\n  }\n\n}\n\nRSAService.ɵfac = function RSAService_Factory(t) {\n  return new (t || RSAService)(i0.ɵɵinject(forge.pki.rsa), i0.ɵɵinject(forge.pki.rsa));\n};\n\nRSAService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RSAService,\n  factory: RSAService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DELL/source/repos/CriptedOnlineChat/CriptedOnlineChat/ClientApp/src/app/rsa.ts"],"names":["forge","i0","RSAService","constructor","publicKey","privateKey","undefined","GenerateKeyPair","then","x","pki","rsa","setPrivateKey","n","e","d","p","q","dP","dQ","qInv","setPublicKey","InitService","keyPair","generateKeyPair","bits","EncriptMessage","message","encriptedMessage","encrypt","DecriptMessage","decriptedMessage","decrypt","ɵfac","RSAService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,SAAD,EAAYC,UAAZ,EAAwB;AAC/B,QAAID,SAAS,IAAIE,SAAjB,EAA4B;AACxB,WAAKC,eAAL,GAAuBC,IAAvB,CAA4BC,CAAC,IAAI;AAC7B,aAAKJ,UAAL,GAAkBI,CAAC,CAACJ,UAApB;AACA,aAAKD,SAAL,GAAiBK,CAAC,CAACL,SAAnB;AACH,OAHD;AAIH,KALD,MAMK;AACD,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACDL,IAAAA,KAAK,CAACU,GAAN,CAAUC,GAAV,CAAcC,aAAd,CAA4BP,UAAU,CAACQ,CAAvC,EAA0CR,UAAU,CAACS,CAArD,EAAwDT,UAAU,CAACU,CAAnE,EAAsEV,UAAU,CAACW,CAAjF,EAAoFX,UAAU,CAACY,CAA/F,EAAkGZ,UAAU,CAACa,EAA7G,EAAiHb,UAAU,CAACc,EAA5H,EAAgId,UAAU,CAACe,IAA3I;AACApB,IAAAA,KAAK,CAACU,GAAN,CAAUC,GAAV,CAAcU,YAAd,CAA2BjB,SAAS,CAACS,CAArC,EAAwCT,SAAS,CAACU,CAAlD;AACH;;AACKQ,EAAAA,WAAW,GAAG;AAAA;AAChB,UAAIlB,SAAJ;AACA,UAAIC,UAAJ;AAFgB;AAGnB;;AACKE,EAAAA,eAAe,GAAG;AAAA;AACpB,UAAIgB,OAAO,SAASvB,KAAK,CAACU,GAAN,CAAUC,GAAV,CAAca,eAAd,CAA8B;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcX,QAAAA,CAAC,EAAE;AAAjB,OAA9B,CAApB;AACA,aAAOS,OAAP;AAFoB;AAGvB;;AACKG,EAAAA,cAAc,CAACC,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,KAAI,CAACvB,SAAL,IAAkBE,SAAtB,EAAiC;AAC7B,YAAIsB,gBAAgB,SAAS,KAAI,CAACxB,SAAL,CAAeyB,OAAf,CAAuBF,OAAvB,CAA7B;AACA,eAAOC,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AACKE,EAAAA,cAAc,CAACH,OAAD,EAAU;AAAA;;AAAA;AAC1B,UAAI,MAAI,CAACtB,UAAL,IAAmBC,SAAvB,EAAkC;AAC9B,YAAIyB,gBAAgB,SAAS,MAAI,CAAC1B,UAAL,CAAgB2B,OAAhB,CAAwBL,OAAxB,CAA7B;AACA,eAAOI,gBAAP;AACH,OAHD,MAIK;AACD,eAAO,WAAP,CADC,CACmB;AACvB;AAPyB;AAQ7B;;AAxCmB;;AA0CxB7B,UAAU,CAAC+B,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIjC,UAAV,EAAsBD,EAAE,CAACmC,QAAH,CAAYpC,KAAK,CAACU,GAAN,CAAUC,GAAtB,CAAtB,EAAkDV,EAAE,CAACmC,QAAH,CAAYpC,KAAK,CAACU,GAAN,CAAUC,GAAtB,CAAlD,CAAP;AAAuF,CAA1I;;AACAT,UAAU,CAACmC,KAAX,GAAmB,aAAcpC,EAAE,CAACqC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,UAAT;AAAqBsC,EAAAA,OAAO,EAAEtC,UAAU,CAAC+B,IAAzC;AAA+CQ,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as forge from 'node-forge';\r\nimport * as i0 from \"@angular/core\";\r\nexport class RSAService {\r\n    constructor(publicKey, privateKey) {\r\n        if (publicKey == undefined) {\r\n            this.GenerateKeyPair().then(x => {\r\n                this.privateKey = x.privateKey;\r\n                this.publicKey = x.publicKey;\r\n            });\r\n        }\r\n        else {\r\n            this.publicKey = publicKey;\r\n            this.privateKey = privateKey;\r\n        }\r\n        forge.pki.rsa.setPrivateKey(privateKey.n, privateKey.e, privateKey.d, privateKey.p, privateKey.q, privateKey.dP, privateKey.dQ, privateKey.qInv);\r\n        forge.pki.rsa.setPublicKey(publicKey.n, publicKey.e);\r\n    }\r\n    async InitService() {\r\n        let publicKey;\r\n        let privateKey;\r\n    }\r\n    async GenerateKeyPair() {\r\n        let keyPair = await forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n        return keyPair;\r\n    }\r\n    async EncriptMessage(message) {\r\n        if (this.publicKey != undefined) {\r\n            let encriptedMessage = await this.publicKey.encrypt(message);\r\n            return encriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // убрать костыль\r\n        }\r\n    }\r\n    async DecriptMessage(message) {\r\n        if (this.privateKey != undefined) {\r\n            let decriptedMessage = await this.privateKey.decrypt(message);\r\n            return decriptedMessage;\r\n        }\r\n        else {\r\n            return \"undefined\"; // тут то же убрать\r\n        }\r\n    }\r\n}\r\nRSAService.ɵfac = function RSAService_Factory(t) { return new (t || RSAService)(i0.ɵɵinject(forge.pki.rsa), i0.ɵɵinject(forge.pki.rsa)); };\r\nRSAService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RSAService, factory: RSAService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}